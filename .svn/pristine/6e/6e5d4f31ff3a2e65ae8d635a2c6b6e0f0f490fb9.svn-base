<template>
  <div class="manuscriptmanage_box" id="manuscriptmanage_box">
    <div class="manuscriptmanage_header">
      <div class="header_break">底稿管理</div>
      <div class="indexpage_header">
        <div class="header_title">
          <!-- <i class="title_portrait_icon"></i> -->
          <toggle-project
            ref="toggleProject"
            type="manu"
            :projectId="pro_id"
            @change-project="switchProjectFn"
          ></toggle-project>
          <template v-if="$utils.checkSystemPermission('project_report')">
            <el-alert
              v-if="messageSendStatus"
              title="信息已报送"
              type="success"
              :closable="false"
              class="message_send"
              show-icon
            >
            </el-alert>
            <el-alert
              v-else
              title="信息未报送"
              type="info"
              :closable="false"
              class="message_send"
              show-icon
            >
            </el-alert>
          </template>
        </div>
        <div class="header_operation">
          <el-dropdown
            v-if="$utils.checkSystemPermission('project_report')"
            @command="handleSend"
          >
            <div class="header_operation_chunk">
              <span class="operate-btn-header iconfont baosong"></span>
              <div>报送</div>
            </div>
            <el-tooltip
              class="item"
              effect="dark"
              content="项目信息报送后才可进行底稿文件报送"
              placement="top"
            >
              <i class="el-icon-warning send_note"></i>
            </el-tooltip>
            <el-dropdown-menu slot="dropdown">
              <el-dropdown-item
                v-for="item in sendList"
                :key="item.reportType"
                :command="item.reportType"
                :disabled="item.disabled"
                >{{ item.name }}</el-dropdown-item
              >
            </el-dropdown-menu>
          </el-dropdown>
          <div class="header_operation_chunk" @click="citeCatalogDialogFns">
            <span class="operate-btn-header iconfont xiugaijilu"></span>
            <div>底稿变动记录</div>
          </div>
          <div
            class="header_operation_chunk"
            v-if="$utils.checkSystemPermission('paper_file_file_dir')"
            @click="citeCatalogDialogFn"
          >
            <span class="operate-btn-header iconfont wenzhang"></span>
            <div>引用目录</div>
          </div>
          <div
            class="header_operation_chunk"
            v-if="$utils.checkSystemPermission('paper_file_lookAll')"
            @click="examineFn"
          >
            <span class="operate-btn-header iconfont chakan-copy"></span>
            <div>全局查看</div>
          </div>
        </div>
      </div>
    </div>
    <div class="manuscriptmanage" id="manuscriptmanage" @click="leftKey">
      <div
        class="bottom_catalogue"
        id="bottom_catalogue"
        v-show="viewType"
        :style="{ width: shrink_bac ? '25px' : '300px' }"
      >
        <div class="catalogue_search">
          <el-input
            placeholder="搜索目录"
            clearable
            v-model="catalogue_search_input"
            @keyup.enter.native="searchDirFn()"
            @change="searchChange()"
            v-if="searchFlag"
            class="catalogue_search_input"
          >
            <el-button
              slot="append"
              icon="el-icon-search"
              @click="searchDirFn"
            ></el-button>
          </el-input>

          <div
            class="catalogue_search_showTitle"
            v-if="dirData.length != 0 && searchFlag && searchEmpty == false"
          >
            <p class="catalogue_search_showTitle_left">
              共{{ dirNum }}个结果,第{{ searchIdx }}个
            </p>
            <div class="catalogue_search_showTitle_right">
              <el-button
                style="padding: 5px"
                size="mini"
                icon="el-icon-arrow-up"
                :disabled="searchIdx === 1 || searchIdx === 0"
                @click="searchUpNode"
              ></el-button>
              <el-button
                style="padding: 5px"
                size="mini"
                icon="el-icon-arrow-down"
                :disabled="searchIdx === dirNum || searchIdx === 0"
                @click="searchDownNode"
              ></el-button>
            </div>
          </div>
          <div class="catalogue_search_showTitle_empty" v-if="searchEmpty">
            <p class="catalogue_search_showTitle_empty_left">未搜索到结果</p>
          </div>
        </div>
        <!-- 适配搜索后zTree高度 -->
        <div
          :class="['catalogue_tree', { search_tree: searchIdx > 0 }]"
          v-show="!searchEmpty"
        >
          <ul id="manuscriptTree" class="ztree manuscriptZtree"></ul>
        </div>
        <div class="catalogue_operation">
          <!-- <div class="operation_add operation_common" v-if="this.$utils.checkSystemPermission('paper_add_atalog')" @click="operationAddFn"></div>
                <div class="operation_del operation_common" v-if="this.$utils.checkSystemPermission('paper_del_atalog')" @click="operationDelFn"></div>
                <div class="operation_edit operation_common" v-if="this.$utils.checkSystemPermission('paper_rename_atalog')" @click="operationEditFn"></div>
                <div class="operation_up  operation_common" v-if="this.$utils.checkSystemPermission('paper_move_atalog')" @click="operationUpFn"></div>
          <div class="operation_down operation_common" v-if="this.$utils.checkSystemPermission('paper_move_atalog')" @click="operationDownFn"></div>-->
          <div
            class="iconfont jiahao color-primary-hover operation_common"
            @click="operationAddFn"
          ></div>
          <div
            class="iconfont shanchu color-primary-hover operation_common"
            @click="operationDelFn"
          ></div>
          <div
            class="iconfont xiuding color-primary-hover operation_common"
            @click="operationEditFn"
          ></div>
          <div
            class="iconfont shangjiantou color-primary-hover operation_common"
            @click="operationUpFn"
          ></div>
          <div
            class="iconfont xiajiantou color-primary-hover operation_common"
            @click="operationDownFn"
          ></div>
        </div>
        <span
          :class="[shrink_bac ? 'shrink_bac_push' : 'shrink_bac_pull']"
          @click="shrinkFn"
        ></span>
      </div>
      <div class="bottom_indexpage" v-scroll-polyfill>
        <div class="indexpage_nav">
          <!-- 检索条件 -->
          <div class="search_box" id="search_box" v-on:keyup.enter="search">
            <div
              :class="[
                'search_box_left',
                { search_box_toggle: !searchBtnDrop }
              ]"
            >
              <div class="search-item-box clearfix">
                <div class="search_item">
                  <div class="search_tit">标题关键字：</div>
                  <el-input
                    v-model="titleSearch"
                    class="el_wide"
                    placeholder="包含以下全部关键字(以空格区分)"
                  ></el-input>
                </div>
                <div class="search_item">
                  <div class="search_tit">内容关键字：</div>
                  <el-input
                    v-model="contentSearch"
                    class="el_wide"
                    placeholder="包含以下全部关键字(以空格区分)"
                  ></el-input>
                </div>
                <div class="search_item">
                  <div class="search_tit">项目阶段：</div>
                  <el-select
                    v-model="projectState"
                    class="el_wide"
                    placeholder="请选择项目阶段"
                  >
                    <el-option
                      v-for="(item, index) in projectStage"
                      :label="item.name"
                      :key="index"
                      :value="item.id"
                    ></el-option>
                  </el-select>
                </div>
                <div class="search_item">
                  <div class="search_tit">文件类型：</div>
                  <multiple-choice
                    ref="fileTypes"
                    @changeData="fileTypesChangeData"
                    :selectData="fileTypes"
                    :width="196"
                    class="el_wide"
                  ></multiple-choice>
                </div>
                <div class="search_item">
                  <div class="search_tit">文件状态：</div>
                  <multiple-choice
                    ref="fileState"
                    @changeData="fileStateChangeData"
                    :selectData="fileState"
                    :width="196"
                    class="el_wide"
                  ></multiple-choice>
                </div>
                <div class="search_item">
                  <div class="search_tit">目录状态：</div>
                  <multiple-choice
                    ref="dirState"
                    @changeData="dirStateChangeData"
                    :selectData="dirState"
                    :width="196"
                    class="el_wide"
                  ></multiple-choice>
                </div>
                <div class="search_item">
                  <div class="search_tit">修改时间：</div>
                  <!-- 修改时间 -->
                  <date-range
                    :width="196"
                    :date-start.sync="startTime"
                    :date-end.sync="endTime"
                    format="yyyy/MM/dd"
                    class="el_wide"
                  ></date-range>
                </div>
                <div class="search_btn" v-show="!searchBtnDrop">
                  <el-button
                    type="primary"
                    icon="el-icon-search"
                    @click="search"
                    >查询</el-button
                  >
                  <el-button icon="el-icon-refresh" @click="resetFn"
                    >重置</el-button
                  >
                </div>
              </div>
            </div>
            <div class="search_btn default_search_btn" v-show="searchBtnDrop">
              <el-button type="primary" icon="el-icon-search" @click="search"
                >查询</el-button
              >
              <el-button icon="el-icon-refresh" @click="resetFn"
                >重置</el-button
              >
            </div>
            <div
              class="btn_drop center btn_drop_search bgcolor-primary-hover border-primary-hover"
              @click="btnBoxToggle('searchBtnDrop')"
              v-if="moreSearchBtnVisible"
            >
              <span>{{ searchBtnDrop ? "更多" : "收起" }}</span>
              <i
                :class="[
                  'drop_icon',
                  'iconfont',
                  searchBtnDrop ? 'jiantou' : 'jiantou_shang'
                ]"
              ></i>
            </div>
          </div>
          <!-- 按钮组 -->
          <div class="nav_operation">
            <div
              :class="['btn_box', { btn_group_toggle: !btnGroupDrop }]"
              id="btn_box"
            >
              <!-- 此块需求变更暂时不上-->
              <!-- <div class="all_proje_enum" id="paper_file_mould">
                        <div class="operation_chunk operation_cite_chunk" @click="citeTempFn">
                            <i class="cite_icon chunk_icon"></i>
                            <span class="chunk_name">引用模版</span>
                        </div>
              </div>-->
              <div class="toolbar_manu">
                <div
                  v-if="
                    this.$utils.checkSystemPermission('paper_add_atalog') &&
                      viewType
                  "
                  @click="addListDir"
                  class="operation_chunk"
                >
                  <i class="iconfont wenjianjia chunk_icon"></i>
                  <span class="chunk_name">新建文件夹</span>
                </div>

                <template
                  v-if="
                    this.$utils.checkSystemPermission(
                      'paper_file_file_upload'
                    ) &&
                      viewType &&
                      false
                  "
                >
                  <!-- <div v-if="!isPC"
                      class="operation_chunk"
                      @click="uploadingFn">
                    <i class="shangchuan iconfont chunk_icon"></i>
                    <span class="chunk_name">上传</span>
                  </div>-->
                  <el-dropdown trigger="click" @command="handleUpload">
                    <div class="operation_chunk operation_chunk2">
                      <i class="shangchuan iconfont chunk_icon"></i>
                      <span class="chunk_name">上传</span>
                    </div>
                    <el-dropdown-menu slot="dropdown">
                      <el-dropdown-item command="file">文件</el-dropdown-item>
                      <el-dropdown-item command="dict">文件夹</el-dropdown-item>
                      <el-dropdown-item v-if="isPC" command="mulit"
                        >多文件及多文件夹</el-dropdown-item
                      >
                      <el-dropdown-item v-if="isPC" command="scan"
                        >扫描上传</el-dropdown-item
                      >
                    </el-dropdown-menu>
                  </el-dropdown>
                </template>
                <div
                  class="operation_chunk"
                  v-if="
                    $utils.checkSystemPermission('paper_file_file_upload') &&
                      viewType
                  "
                >
                  <el-dropdown trigger="click" @command="handleUpload">
                    <div class="operation_chunk2">
                      <i class="shangchuan iconfont chunk_icon"></i>
                      <span class="chunk_name">上传</span>
                    </div>
                    <el-dropdown-menu slot="dropdown">
                      <el-dropdown-item command="file">文件</el-dropdown-item>
                      <el-dropdown-item command="dict">文件夹</el-dropdown-item>
                      <el-dropdown-item v-if="isPC" command="mulit"
                        >多文件及多文件夹</el-dropdown-item
                      >
                      <el-dropdown-item v-if="isPC" command="scan"
                        >扫描上传</el-dropdown-item
                      >
                    </el-dropdown-menu>
                  </el-dropdown>
                </div>
                <div
                  v-if="
                    this.$utils.checkSystemPermission('paper_file_file_down')
                  "
                  class="operation_chunk"
                  @click="downloadFn"
                >
                  <i class="iconfont Shapecopy chunk_icon"></i>
                  <span class="chunk_name">下载</span>
                </div>

                <div
                  v-if="
                    this.$utils.checkSystemPermission('paper_file_file_del')
                  "
                  class="operation_chunk"
                  @click="rightMenuDelete(true)"
                >
                  <i class="shanchu iconfont chunk_icon"></i>
                  <span class="chunk_name">删除</span>
                </div>

                <div
                  v-if="
                    this.$utils.checkSystemPermission('paper_file_file_dition')
                  "
                  class="operation_chunk"
                  @click="versionsDialogFn"
                >
                  <i class="xinjianbanbenku iconfont chunk_icon"></i>
                  <span class="chunk_name">版本</span>
                </div>

                <div class="operation_chunk" @click="fileApprove(2)">
                  <i class="shenpi iconfont chunk_icon"></i>
                  <span class="chunk_name">文件审批</span>
                </div>

                <div class="operation_chunk" @click="fileApprove(3)">
                  <i class="wenzhang iconfont chunk_icon"></i>
                  <span class="chunk_name">目录审批</span>
                </div>

                <div class="operation_chunk" @click="discussionFn">
                  <i class="taolun iconfont chunk_icon"></i>
                  <span class="chunk_name">讨论</span>
                </div>

                <div class="operation_chunk" @click="setRemindClick">
                  <i class="ling iconfont chunk_icon"></i>
                  <span class="chunk_name">设置提醒</span>
                </div>

                <div class="operation_chunk" @click="toSelectList">
                  <i class="yixuanliebiao iconfont chunk_icon"></i>
                  <span class="chunk_name">已选文件列表</span>
                </div>

                <div class="operation_chunk" @click="clearSelection(true)">
                  <i class="quxiaoxuanze iconfont chunk_icon"></i>
                  <span class="chunk_name">取消选择</span>
                </div>
                <!-- v-if="this.$utils.checkSystemPermission('paper_file_copy')" -->
                <div class="operation_chunk" @click="copyClick">
                  <i class="fuzhi iconfont chunk_icon"></i>
                  <span class="chunk_name">复制</span>
                </div>

                <div class="operation_chunk" @click="pasreClick">
                  <i class="niantie iconfont chunk_icon"></i>
                  <span class="chunk_name">普通粘贴</span>
                </div>
                <div class="operation_chunk" @click="indexPasreClick">
                  <i class="niantie1 iconfont chunk_icon"></i>
                  <span class="chunk_name">索引粘贴</span>
                </div>
                <div class="operation_chunk" @click="fileApprove(10)">
                  <i class="xiugai iconfont chunk_icon"></i>
                  <span class="chunk_name">文件修订</span>
                </div>
                <div class="operation_chunk" @click="fileApprove(11)">
                  <i class="beizhu1 iconfont chunk_icon"></i>
                  <span class="chunk_name">目录修订</span>
                </div>
                <div class="operation_chunk" @click="remarkClick">
                  <i
                    class="ccgl-shujuzidianxiugaijilu-3 iconfont chunk_icon"
                  ></i>
                  <span class="chunk_name">备注</span>
                </div>

                <div class="operation_chunk" @click="projectIndexList">
                  <i class="iconfont suoyin chunk_icon"></i>
                  <span class="chunk_name">索引列表</span>
                </div>

                <div class="operation_chunk" @click="approvalHandle(1)">
                  <i class="wenjianshenpishenhequeren iconfont chunk_icon"></i>
                  <span class="chunk_name">文件审批意见</span>
                </div>
                <div class="operation_chunk" @click="approvalHandle(2)">
                  <i class="wenjianshenpishenhequeren iconfont chunk_icon"></i>
                  <span class="chunk_name">目录审批意见</span>
                </div>
                <div
                  class="operation_chunk"
                  v-if="
                    this.$utils.checkSystemPermission('edit_paper_index_max')
                  "
                  @click="editIndexList"
                >
                  <i class="guanlian iconfont chunk_icon"></i>
                  <span class="chunk_name">批量编辑关联</span>
                </div>
                <div class="operation_chunk" @click="viewChange">
                  <i
                    :class="[
                      'iconfont',
                      'chunk_icon',
                      viewType ? 'liebiaoshitu' : 'mulushitu'
                    ]"
                  ></i>
                  <span class="chunk_name">{{
                    viewType ? "列表视图" : "目录视图"
                  }}</span>
                </div>
              </div>
            </div>
            <div
              class="btn_drop center btn_drop_group bgcolor-primary-hover border-primary-hover"
              @click="btnBoxToggle('btnGroupDrop')"
              v-if="moreHandleBtnVisible"
            >
              <span>{{ btnGroupDrop ? "更多" : "收起" }}</span>
              <i
                :class="[
                  'drop_icon',
                  'iconfont',
                  btnGroupDrop ? 'jiantou' : 'jiantou_shang'
                ]"
              ></i>
            </div>

            <!-- <div class="btn_drop">
              <el-button @click="btnBoxToggle('btnGroupDrop')"
                         type="primary"
                         size="mini"
                         round
                         plain>
                {{ btnGroupDrop ? "更多" : "收起" }}
                <i :class="[
                    'drop_icon',
                    'iconfont',
                    btnGroupDrop ? 'jiantou' : 'jiantou_shang'
                  ]"></i>
              </el-button>
            </div>-->
          </div>
          <!-- 路径 -->
          <div class="nav_title" v-show="viewType">
            <div class="title_left">
              <div class="title_nav">
                <path-bar
                  :paths="navArray"
                  field="docName"
                  @toggle="navClickFn"
                ></path-bar>
              </div>
            </div>
            <!-- <div class="title_right">
              <el-input placeholder="全文检索" class="title_input" v-model="search_input" suffix-icon="el-icon-search" @blur="searchFn" @keyup.enter.native="searchFn">
              </el-input>
            </div>-->
          </div>
        </div>
        <div
          class="indexpage_list"
          id="indexpage_list"
          @contextmenu.prevent="rightEvent(null)"
        >
          <el-table
            ref="multipleTable"
            :data="flieNameData"
            @select-all="handleSelectAll"
            @select="handleSelectDoc"
            style="width: 100%;"
            @sort-change="sort_change"
            @row-dblclick="dblclickFn"
            @selection-change="selectChangeFn"
            size="small"
            class="manu_table"
            id="manu_table"
            :header-cell-style="
              viewType
                ? { background: 'rgba(255, 255, 255, 1)' }
                : { background: 'rgba(250, 250, 250, 1)' }
            "
            :row-style="rowClass"
            @row-contextmenu="rightEvent"
          >
            <el-table-column type="selection" width="55"></el-table-column>
            <el-table-column
              label="文件名"
              sortable="custom"
              class="tabel_name"
              prop="docName"
              min-width="300"
              style="background:red; color: red;"
            >
              <template slot-scope="scope">
                <div class="list_name">
                  <div class="list_name_icon" v-if="!scope.row.isAddDir">
                    <img class="list_name_icon_img" :src="scope.row.fileIcon" />
                  </div>
                  <template v-if="scope.row.isEdit || scope.row.isAddDir">
                    <div v-if="scope.row.isEdit" class="list_name_rename">
                      <el-input
                        class="title_input"
                        v-model="editName_input"
                        maxlength="250"
                        clearable
                      ></el-input>
                      <i
                        class="editIcon el-icon-success"
                        title="确定"
                        @click="editNameFn"
                      ></i>
                    </div>
                    <div
                      v-if="scope.row.isAddDir"
                      class="list_name_rename"
                      v-on:keyup.enter="addDir"
                    >
                      <el-input
                        class="title_input"
                        v-model="addDirInput"
                        maxlength="250"
                        clearable
                        placeholder="请输入文件夹名称"
                      ></el-input>
                      <i
                        class="addIcon el-icon-error"
                        title="取消"
                        @click="cancelAdd"
                      ></i>
                      <i
                        class="editIcon el-icon-success"
                        title="确定"
                        @click="addDir"
                      ></i>
                    </div>
                  </template>

                  <div
                    v-else-if="scope.row.isLinkDelete == 1"
                    class="list_name_title_die"
                    :title="scope.row.docName"
                  >
                    {{ scope.row.docName }}
                    <div
                      id="list_name_title_auditStatusdiv"
                      v-if="scope.row.icon"
                    >
                      <el-tag
                        style="text-decoration: line-through;color: #ccc;"
                        :title="i.labelName"
                        :key="i.id"
                        v-for="i in scope.row.icon"
                        :class="{ 'isNotFit-label': i.isNotFit }"
                        >{{ i.labelName }}</el-tag
                      >
                    </div>
                  </div>

                  <div
                    v-else
                    :class="[
                      {
                        list_name_title3:
                          (scope.row.lockState || scope.row.auditStatus == 2) &&
                          scope.row.icon &&
                          scope.row.icon.length != 0
                      },
                      'list_name_title2',
                      'list_name_title'
                    ]"
                  >
                    <div :title="scope.row.docName" class="three-row-name">
                      <span>{{ scope.row.docName }}</span>
                      <i
                        @click.stop="newLaber(scope.row)"
                        class="iconfont biaoqian1 edit-tag"
                        title="编辑标签"
                        aria-hidden="true"
                      ></i>
                    </div>

                    <span
                      v-if="scope.row.isShowIcon"
                      class="list_name_title_icon"
                    >
                      <!-- 文件状态 -->
                      <template>
                        <!-- 审批状态图片 -->
                        <span
                          v-if="scope.row.auditStatus == 0"
                          title="审批中"
                          class="list_icon_img auditStatus_z"
                        ></span>
                        <span
                          v-if="scope.row.auditStatus == 1"
                          title="审批通过"
                          class="list_icon_img auditStatus_pass"
                        ></span>
                        <span
                          v-if="scope.row.auditStatus == 3"
                          title="节点审批通过"
                          class="list_icon_img auditStatus_jdsptg"
                        ></span>
                        <span
                          v-if="scope.row.auditStatus == 4"
                          title="待审批"
                          class="list_icon_img auditStatus_dsp"
                        ></span>
                        <span
                          v-if="scope.row.auditStatus == 7"
                          title="修订中"
                          class="list_icon_img auditStatus_xdz"
                        ></span>
                        <span
                          v-if="scope.row.auditStatus == 8"
                          title="已归档"
                          class="list_icon_img auditStatus_ygd"
                        ></span>
                        <span
                          v-if="scope.row.auditStatus == 6"
                          title="修订审批中"
                          class="list_icon_img auditStatus_xdspz"
                        ></span>
                        <span
                          v-if="scope.row.auditStatus == 2"
                          title="驳回未修改"
                          class="list_icon_img auditStatus_bhwxg"
                        ></span>
                        <span
                          v-if="scope.row.auditStatus == 5"
                          title="驳回已修改"
                          class="list_icon_img auditStatus_bhyxg"
                        ></span>
                      </template>
                      <!-- 目录状态 -->
                      <!-- <template v-else>
                        <span v-if="scope.row.auditStatus == 1"
                              title="已通过"
                              class="list_icon_img auditStatus_passed"></span>
                        <span v-if="scope.row.auditStatus == 2"
                              title="未通过"
                              class="list_icon_img auditStatus_noPassed"></span>
                      </template>-->
                      <!-- 状态logo -->
                      <span
                        v-if="scope.row.lockState"
                        title="锁定"
                        class="list_icon icon_lock tubiao-suo iconfont"
                      ></span>
                      <span
                        v-if="scope.row.reminder"
                        title="提醒"
                        class="list_icon icon_remind tongzhi iconfont"
                      ></span>
                      <span
                        v-if="scope.row.notes"
                        title="备注"
                        class="list_icon icon_note beizhu iconfont"
                      ></span>
                      <span
                        v-if="scope.row.record"
                        title="审批记录"
                        class="list_icon icon_record shenpijilu1 iconfont"
                      ></span>
                    </span>
                    <div
                      id="list_name_title_auditStatusdiv"
                      v-if="scope.row.icon"
                    >
                      <p
                        v-for="i in scope.row.icon"
                        :key="i.id"
                        :title="i.labelName"
                        class="tag-label"
                        :class="{ 'isNotFit-label': i.isNotFit }"
                      >
                        {{ i.labelName }}
                      </p>
                    </div>
                  </div>
                </div>
              </template>
            </el-table-column>

            <el-table-column
              v-if="!viewType"
              label="所在目录"
              label-class-name="list_title_time"
              min-width="140"
            >
              <template slot-scope="scope">
                <div
                  class="list_time"
                  :title="`${scope.row.fullPath} / ${scope.row.docName}`"
                >
                  <span class="ellipsis1">{{ scope.row.parentName }}</span>
                </div>
              </template>
            </el-table-column>

            <el-table-column
              label="修改时间"
              prop="modifyTime"
              sortable="custom"
              label-class-name="list_title_time"
              min-width="140"
              align="center"
            >
              <template slot-scope="scope">
                <div v-if="scope.row.docType == 0" class="list_time">
                  <span class="list_time_updateTime">{{
                    scope.row.updateTime
                  }}</span>
                  <div>
                    <span
                      class="list_time_updateUserName"
                      :title="scope.row.createUserName"
                      >{{ scope.row.createUserName }}</span
                    >
                    &nbsp;
                    <span
                      v-if="
                        $utils.checkSystemPermission('paper_file_file_dition')
                      "
                    >
                      生成
                      <span class="color-primary list_time_docVersionNumber"
                        >V{{ scope.row.docVersionNumber }}</span
                      >
                    </span>
                  </div>
                </div>
              </template>
            </el-table-column>

            <el-table-column
              label="大小"
              prop="size"
              align="center"
              sortable="custom"
              width="80"
            >
              <template slot-scope="scope">
                <!--                <div class="list_size">{{ $utils.handleFileSize(scope.row.docSize) }}</div>-->
                <div class="list_size">{{ scope.row.docSize | filesize }}</div>
              </template>
            </el-table-column>

            <el-table-column label="底稿关联" align="center" min-width="270">
              <template slot-scope="scope">
                <div
                  class="list_size"
                  v-if="scope.row.docType === 0 && scope.row.indexPaper"
                >
                  <p
                    v-for="(item, index) in scope.row.indexPaper"
                    :key="index"
                    @mouseover="indexPaperHover(item)"
                    @click="paperIndexView(scope.row, item)"
                    :title="item.title"
                    :class="[
                      'paper_index_name',
                      {
                        paper_index_name_die:
                          scope.row.isLinkDelete == 1 || item.isLinkDelete == 1
                      }
                    ]"
                  >
                    {{ item.docName }}
                  </p>
                </div>
              </template>
            </el-table-column>
            <el-table-column
              label="操作"
              align="center"
              class="pro_edit_task"
              width="100"
            >
              <template slot-scope="scope">
                <el-button
                  type="text"
                  class="tab_edit_btn color-primary"
                  title="编辑底稿关联"
                  @click="editIndex(scope.row)"
                  v-if="
                    scope.row.docType === 0 &&
                      $utils.checkSystemPermission('edit_paper_index')
                  "
                  :disabled="scope.row.isLinkDelete == 1"
                  >编辑底稿关联</el-button
                >
              </template>
            </el-table-column>
          </el-table>
        </div>
        <div class="bottom_box_fied">
          <div class="bottom_box" id="bottom_box">
            <div class="sel_total">已选中 {{ selectedNum }} 项</div>
            <el-pagination
              class="bottom_pagination"
              v-if="isShowPagination"
              background
              @size-change="handleSizeChange"
              @current-change="handleCurrentChange"
              :current-page="listPageNo + 1"
              :page-sizes="[10, 20, 50, 100]"
              :page-size="listPageSize"
              layout="total, sizes, prev, pager, next, jumper"
              :total="tableListTotal"
              :pager-count="5"
            ></el-pagination>
          </div>
        </div>
      </div>
    </div>

    <record
      v-if="citeCatalogDialogFnre"
      @citeCatalogs="citeCatalogs"
      :projectName="projectName"
      :citeCatalogDialogFnre="citeCatalogDialogFnre"
    />
    <!-- <laberTrue
      v-if="laberTrues"
      :laberTrues="laberTrues"
      @laberTrueclose="laberTrueclose"
      :laberTruesitem="laberTruesitem"
    /> -->
    <!-- <rightmenu  :rightMenuIsShow= "rightMenuIsShow" :fileData= "rightMenuItemData" v-on:rightMenuClick="rightMenuClick" class="rightMenu"  id="rightM"/> -->
    <remark
      :remarkIsShow="remarkIsShow"
      :remarkList="remarkList"
      @saveRemark="saveRemark"
      title="备注"
      :docData="reMarkData"
      @colseModule="remarkClose"
    ></remark>
    <!-- 文件上传 -->
    <rd-uploader
      ref="RdUploader"
      :transfer="true"
      @uploaded="docUploadFn"
      @version="versionUploadFn"
      @complete="zTreeDisplay"
    ></rd-uploader>

    <!-- 设置提醒 -->
    <set-remind-dialog
      :chosefilelist.sync="chosefilelist"
      v-if="isShowSetRemind"
      :isShowSetRemind.sync="isShowSetRemind"
      @remindSuccess="remindSuccess"
      @remindClose="remindClose"
    ></set-remind-dialog>
    <input type="file" id="fileBtn" style="display:none" />
    <rightMenuOne
      :isShow="rightMenuIsShow"
      :fileData="rightMenuItemData"
      :needFunction="rightMenuNeedFunction"
      v-on:rightMenuClick="rightMenuClick"
      class="rightMenu"
      id="rightM"
    ></rightMenuOne>
    <!-- 单个编辑索引 -->
    <edit-Index
      v-if="relafagmanus"
      @clearstate="draftClears"
      :manscProjectId="newProjId || pro_id"
      :indexedPaper="indexList"
      :hostIndexPaper="editIndexCurPaper"
      @elationUpmansc="elationUpmanscFn"
    ></edit-Index>
    <!-- 批量编辑索引 -->
    <batch-Edit-Index
      ref="docRelationObj"
      :docRelationIsShow.sync="openBatchEditIndex"
      :projectId="newProjId || pro_id"
      @submitBatchIndex="submitBatchIndex"
    ></batch-Edit-Index>
    <!-- 文件/目录 修订/审批 -->
    <doc-exam
      ref="docExam"
      :projectData="projectData"
      :examType="examType"
      @sendValueToParent="docExamClose"
      @sendToParentQueryDoc="docExamCallback"
      @multipleCallback="docExamMultiple"
      :docSource="2"
    ></doc-exam>
    <!-- 索引列表的弹框 -->
    <project-index-lists
      :projectIndexShow.sync="projectIndexShow"
      :projectIndexData="projectIndexData"
      @sendProjectHandle="sendProjectHandle"
    ></project-index-lists>
    <!-- 消息中心提示的弹框 -->
    <location-dialog
      :locationActive.sync="locationActive"
      :fileList="locationMsgData"
      :lodata="lodata"
      :source="1"
    ></location-dialog>
    <index-template
      :visible.sync="isShowIndexTemplate"
      :source="2"
      @confirm="indexTemConfirm"
      @preview="indexTemPreview"
    ></index-template>
    <dir-template-preview
      :visible.sync="isDirPreview"
      :previewData="temPreviewData"
      @quote="indexTemConfirm"
    ></dir-template-preview>

    <el-dialog
      title="文件版本"
      :close-on-click-modal="false"
      :visible.sync="versionVisible"
      width="500px"
      class="versions_dialog"
      :before-close="closeVersion"
    >
      <div>
        <ul>
          <li class="clearfix" style="background:#FAFAFA;">
            <span class="span_first">当前版本</span>
            <span class="span_two">生成人</span>
            <span class="span_two">大小</span>
            <span class="span_two">操作</span>
          </li>
          <div style="height:250px;">
            <el-scrollbar style="height:100%">
              <li
                v-for="(item, idx) in versionsData"
                class="version_content_item clearFix"
                :key="idx"
              >
                <!-- <el-checkbox v-model="item.checked" @change="verionsCheckChang(item)" class="span_check"></el-checkbox> -->
                <span class="span_btn"
                  >V{{ item.docVersionNumber }} {{ item.updateTime }}</span
                >
                <span class="span_sec">{{ item.userName }}</span>
                <span class="span_sec">{{ item.docSize | filesize }}</span>
                <span class="span_sec">
                  <span class="span_sec_return" @click="restoreFn(item)"
                    >还原</span
                  >
                  <span class="span_sec_down" @click="versionLoad(item)"
                    >下载</span
                  >
                </span>
              </li>
            </el-scrollbar>
          </div>
        </ul>
      </div>
      <span slot="footer" class="dialog-footer">
        <el-button size="medium" @click="closeVersion">取 消</el-button>
        <el-button @click="affirmVersionUpload(true)" size="medium"
          >上传新版本</el-button
        >
      </span>
    </el-dialog>
    <el-dialog
      title="全局查看"
      :close-on-click-modal="false"
      :visible.sync="examineVisible"
      width="50%"
      class="examine_dialog"
    >
      <div class="examine_content">
        <div class="content_left">
          <el-scrollbar style="height:100%">
            <div class="left_content">
              <div class="left_content_chunk">
                <span class="content_chunk_name">目录审批状态</span>
                <el-checkbox
                  v-for="(item, idx) in checkCaAuditState"
                  :key="idx"
                  :label="item"
                  v-model="item.checked"
                  @change="examineCheckedFn(item)"
                  >{{ item.name }}</el-checkbox
                >
              </div>
              <div class="left_content_chunk">
                <span class="content_chunk_name">目录状态</span>
                <el-checkbox
                  v-for="(item, idx) in checkAuditState"
                  :key="idx"
                  :label="item"
                  v-model="item.checked"
                  @change="examineCheckedFn(item)"
                  >{{ item.name }}</el-checkbox
                >
              </div>
              <div class="left_content_chunk">
                <span class="content_chunk_name">文件审批状态</span>
                <el-checkbox
                  v-for="(item, idx) in checkFileAuditState"
                  :key="idx"
                  :label="item"
                  v-model="item.checked"
                  @change="examineCheckedFn(item)"
                  >{{ item.name }}</el-checkbox
                >
              </div>
              <div class="left_content_chunk">
                <span class="content_chunk_name">文件类型</span>
                <el-checkbox
                  v-for="(item, idx) in checkFileType"
                  :label="item"
                  :key="idx"
                  v-model="item.checked"
                  @change="examineCheckedFn(item)"
                  >{{ item.name }}</el-checkbox
                >
              </div>
            </div>
          </el-scrollbar>
          <div class="left_footer" @click="examineResetConFn">
            <i></i>
            <div>重置筛选条件</div>
          </div>
        </div>
        <div class="content_right">
          <div class="right_title">
            <span class="right_title_name">名称</span>
            <span class="right_title_state">状态</span>
            <el-button
              class="right_title_download"
              style="color;margin-left: 9%;"
              size="medium"
              @click="examineDownloadFn"
              >下 载</el-button
            >
            <el-button
              class="right_title_export"
              size="medium"
              @click="examineExportFn"
              >导出记录</el-button
            >
          </div>
          <div class="right_tree" v-loading="treeLoading">
            <ul id="examineTree" class="ztree examineZtree"></ul>
            <!-- <el-scrollbar style="height:100%">

            </el-scrollbar>-->
          </div>
        </div>
      </div>
      <div slot="footer" class="dialog-footer">
        <el-button
          size="medium"
          @click="examineVisible = false"
          class="examin_close"
          >关闭</el-button
        >
      </div>
    </el-dialog>
    <el-dialog
      title="文件属性"
      :close-on-click-modal="false"
      :visible.sync="propertyVisible"
      width="35%"
      class="fileAttribute_dialog"
    >
      <div class="fileAttribute_content">
        <div class="fileAttribute_content_item">
          <div class="fileAttribute_content_item_title">名称：</div>
          <div class="fileAttribute_content_item_data">
            {{ rightMenuItemData.docName }}
          </div>
        </div>
        <div class="fileAttribute_content_item">
          <div class="fileAttribute_content_item_title">大小：</div>
          <div class="fileAttribute_content_item_data">
            {{ propertyData.docSize | filesize }}
          </div>
        </div>
        <div class="fileAttribute_content_item">
          <div class="fileAttribute_content_item_title">创建：</div>
          <div class="fileAttribute_content_item_data">
            {{ propertyData.docCreateInto }}
          </div>
        </div>
        <div
          class="fileAttribute_content_item"
          v-if="this.$utils.checkSystemPermission('paper_file_file_dition')"
        >
          <div class="fileAttribute_content_item_title">版本：</div>
          <div class="fileAttribute_content_item_data">
            {{ propertyData.docVersion }}
          </div>
        </div>
        <div class="fileAttribute_content_item">
          <div class="fileAttribute_content_item_title">锁定：</div>
          <div class="fileAttribute_content_item_data">
            {{ propertyData.docLockStatus }}
          </div>
        </div>
      </div>
    </el-dialog>
    <!-- 目录标签组件 -->
    <folder-tag
      :folderTagItem="laberTruesitem"
      :folderTagShow.sync="folderTagShow"
      @folderTagSubmit="folderTagSubmit"
      :isFolder="labelType"
    ></folder-tag>
  </div>
</template>
<script>
import setRemindDialog from "./SetRemindDialog";
import rightMenuOne from "./rightMenu.vue";
import laberTrue from "@/components/select_box/laberTrue";
import record from "@/components/select_box/record";
import remark from "@/components/file/remark";
import { wisdom_doc } from "@/pages/common/js/doc.main";
import { setTimeout, setInterval, clearInterval } from "timers";
import docExam from "@/pages/front/projectlist/projectDoc/docExam";
// import catalogExam from '@/pages/front/projectlist/projectDoc/catalogExam';
import projectIndexLists from "@/pages/front/projectlist/projectDoc/projectIndexLists";
// 单个关联
import editIndex from "@/pages/front/manuscriptmanage/editIndex";
// 批量编辑关联
import batchEditIndex from "@/pages/front/manuscriptmanage/batchEditIndex";
// 消息中心定位提示
import locationDialog from "@/pages/front/manuscriptmanage/locationDialog.vue";
// 引用目录
import indexTemplate from "@/components/dialogcommon/indexTemplate";
import dirTemplatePreview from "@/components/dialogcommon/dirTemplatePreview";
import FolderTag from "@/components/folderTag/FolderTag";

// import uploadAddDoc from '@/components/file/uploadAddDoc'
export default {
  components: {
    rightMenuOne, // 底稿右键组件
    laberTrue, // 添加标签
    record, // 底稿变动记录
    setRemindDialog, // 底稿设置提醒
    remark, // 备注
    docExam,
    editIndex, //单个关联
    batchEditIndex, //批量编辑关联
    // catalogExam, // 目录审批
    projectIndexLists, // 索引弹框
    locationDialog, // 消息中心定位提示
    indexTemplate, // 引用目录
    dirTemplatePreview,
    FolderTag // 标签文件
  },
  directives: {
    // 用来兼容右侧滚动 左侧不滚动问题
    "scroll-polyfill": {
      bind(el, binding) {
        let isReachBottom = false;
        el.addEventListener("scroll", () => {
          let scrollTop = el.scrollTop;
          let scrollHeight = el.scrollHeight;
          let offsetHeight = Math.ceil(el.getBoundingClientRect().height);
          let currentHeight = scrollTop + offsetHeight + 40;
          if (currentHeight < scrollHeight && isReachBottom) {
            isReachBottom = false;
          }
          if (isReachBottom) {
            return;
          }
          if (scrollHeight <= currentHeight) {
            isReachBottom = true;
            const BOX = $("#el_main .el-scrollbar__wrap");
            BOX.animate({ scrollTop: BOX.outerHeight(true) }, 500);
          }
        });
      }
    }
  },
  data() {
    const dirState = [
      { value: 0, label: "无文件" },
      { value: 1, label: "有文件" },
      { value: 3, label: "已选择" },
      { value: 4, label: "待审批" },
      { value: 5, label: "审批中" },
      { value: 6, label: "审批通过" },
      // { value: 7,label: '已驳回' },
      { value: 9, label: "节点审批通过" },
      { value: 12, label: "修订中" },
      { value: 13, label: "修订审批中" },
      { value: 10, label: "驳回未修改" },
      { value: 11, label: "驳回已修改" },
      { value: 8, label: "有标签的" },
      { value: 2, label: "有讨论的" },
      { value: 14, label: "有审批记录的" },
      { value: 15, label: "引用目录" },
      { value: 16, label: "非引用目录" }
    ];
    const fileState = [
      // { value: 0, label: '有索引的' },
      // { value: 5, label: '无索引的' },
      { value: 2, label: "有备注的" },
      { value: 4, label: "有讨论的" },
      { value: 16, label: "有标签的" },
      { value: 7, label: "待审批" },
      { value: 8, label: "审批中" },
      { value: 14, label: "审批通过" },
      { value: 9, label: "节点审批通过" },
      { value: 10, label: "驳回未修改" },
      { value: 11, label: "驳回已修改" },
      { value: 12, label: "修订中" },
      { value: 13, label: "修订审批中" },
      { value: 1, label: "已选择" },
      { value: 15, label: "有关联的" },
      { value: 3, label: "有审批记录的" },
      { value: 6, label: "有设置提醒的" },
      { value: 20, label: "已归档" }
    ];
    const fileTypes = [
      { value: 0, label: "doc/docx" },
      { value: 1, label: "pdf" },
      { value: 2, label: "xls/xlsx" },
      { value: 3, label: "txt" },
      { value: 4, label: "png" },
      { value: 5, label: "jpg/jpeg" }
    ];
    return {
      treeLoading: false,
      tableHeight: 600,
      isPC: false,
      orderFlag: "",
      laberTrues: false,
      citeCatalogDialogFnre: false,
      laberTruesitem: "",
      value: "",
      token: "", //请求接口默认必传数据
      userId: "", //请求接口默认必传数据
      pageNo: 0, //请求接口默认必传数据
      pageSize: 500, //请求接口默认必传数据
      listPageNo: 0,
      listPageSize: 100,
      pro_id: "", //项目Id
      projectMsg: "", //项目信息
      requestCode: {}, //所有请求的状态码
      reqApi: "", //动态请求地址
      docSource: 1, //底稿管理标实
      shrink_bac: true, //推拉状态 true为push
      zNodes: [],
      setting: {
        //左面底稿目录zTree默认配置
        check: {
          // 多选功能砍掉
          enable: false,
          chkStyle: "checkbox",
          chkDisabledInherit: true
        },
        data: {
          simpleData: {
            enable: true,
            pIdKey: "parentId",
            idKey: "id",
            rootPId: 0
          },

          key: {
            name: "highlightName"
            // checked: 'isCheck'
          }
        },
        view: {
          selectedMulti: false,
          showLine: false,
          dblClickExpand: false,
          addDiyDom: this.addDirStatusDiyDom,
          fontCss: this.setSearchFontCss
        },
        edit: {
          enable: true,
          editNameSelectAll: true,
          showRemoveBtn: false,
          showRenameBtn: false,
          drag: {
            isCopy: false,
            isMove: false
          }
        },
        async: {
          enable: true,
          url: this.getAsyncUrl,
          contentType: "application/json",
          dataType: "json",
          autoParam: [],
          otherParam: this.getAsyncData,
          dataFilter: this.treeFilterFn
        },
        callback: {
          beforeClick: this.zTreeBeforeClickFn,
          beforeRemove: this.zTreeBeforeRemoveFn,
          onClick: this.zTreeOnClickFn,
          onAsyncSuccess: this.onAsyncSuccessFn,
          beforeRename: this.zTreeBeforeRenameFn,
          onRename: this.zTreeOnRenameFn,
          onCheck: this.zTreeOnCheckFn
        }
      },
      examineZnodes: [],
      examineSetting: {
        //全局查看zTree默认配置
        view: {
          addDiyDom: this.addDiyDom,
          showLine: false
        },
        check: {
          enable: true,
          chkStyle: "checkbox",
          chkDisabledInherit: this.chkDisabledInherit
        },
        data: {
          simpleData: {
            enable: true,
            pIdKey: "parentId",
            idKey: "id",
            rootPId: 0
          },
          key: {
            name: "docName"
          }
        },
        callback: {
          onCheck: this.examineTreeOnCheck,
          onClick: this.examineTreeOnClickFn
        }
      },
      chkDisabledInherit: true,
      oldProjId: "", //旧的项目地址
      newProjId: "", //新的项目地址
      targetTreeNode: "", //点击树目录的节点数据
      workCatalogueName: "", //工作底稿目录名字
      workCatalogueParentId: "", //工作底稿目录Id
      parentIdUpload: "",
      isEditFlag: false,
      projectIdData: [],
      flieNameData: [],
      examineVisible: false, // 控制全局查看弹框
      dirAuditStatusArray: [],
      dirDocStatusArray: [],
      docAuditStatusArray: [],
      gloableDocTypeArray: [],
      versionsData: [], //文件版本数据
      checkCaAuditState: [
        {
          dirAuditStatus: 0,
          name: "待审批",
          checked: false
        },
        {
          dirAuditStatus: 1,
          name: "已通过",
          checked: false
        },
        {
          dirAuditStatus: 2,
          name: "已驳回",
          checked: false
        },
        {
          dirAuditStatus: 3,
          name: "未审批",
          checked: false
        }
      ],
      checkAuditState: [
        {
          dirDocStatus: 1,
          name: "有文件",
          checked: false
        },
        {
          dirDocStatus: 2,
          name: "无文件",
          checked: false
        }
      ],
      checkFileAuditState: [
        {
          docAuditStatus: 0,
          name: "待审批",
          checked: false
        },
        {
          docAuditStatus: 1,
          name: "已通过",
          checked: false
        },
        {
          docAuditStatus: 2,
          name: "已驳回",
          checked: false
        },
        {
          docAuditStatus: 3,
          name: "未审批",
          checked: false
        }
      ],
      checkFileType: [
        {
          gloableDocType: 1,
          name: "PDF",
          checked: false
        },
        {
          gloableDocType: 2,
          name: "Word",
          checked: false
        },
        {
          gloableDocType: 3,
          name: "其他",
          checked: false
        }
      ],
      fileState,
      fileTypes,
      dirState,
      citeCatalog_radio: "1", //引用目录单选按钮值
      search_input: "", //全文检索input值
      postilFlag: true, //批注句柄
      selectFileNameArray: [],
      rightMenuIsShow: false, //右键是否显示
      rightMenuNeedFunction: [], //右键需要的特殊数据
      versionVisible: false, // 版本弹框控制
      uploadDocAddIsShow: false,
      uploadParamData: {},
      uploadParamData_Version: {},
      addDoc: false,
      examineTreeNode: [],
      copyData: "",
      rightMenuItemData: {},
      propertyVisible: false,
      propertyData: {},
      navArray: [],
      editName_input: "",
      arrData: [],
      projectName: this.$store.state.projectMsg.projectMsg.name,
      parentIdData: "",
      dblclickData: "", //双击时当前这条数据
      clickType: 0,
      copyType: "",
      copyStoreData: {
        //粘贴数据
        ids: "", //文件ID
        oldProjId: "", //粘贴到的项目ID
        newProjId: "", //原项目ID
        copyData: "", //粘贴数据
        copyType: "" //已复制或者剪切
      },
      citeCatalog: true,
      renameFlag: true,
      renameData: "",
      renameSuffix: "", //文件重命名后缀
      manuscriptTreeDemo: "",
      examineTreeDemo: "",
      intervalId: "", //全文查看的下载定时器
      loading: "",
      flag: true,
      needDomElem: {
        // 页面需要dom元素
        btnGroupBox: "", // 按钮组DOM元素
        manuBox: "", // 底稿区域
        tableBox: "", // 表格区域
        listScrollTop: "" // 表格内容区域
      },
      docLoction: "", //定位数据
      searchFlag: false, //搜索是否显示
      catalogue_search_input: "", //搜索内容
      dirNum: 0, //搜索后文件的个数
      dirData: [],
      searchIdx: 0,
      searchEmpty: false,
      //底稿索引
      relafagmanus: false, //底稿选择
      openBatchEditIndex: false, //是否显示批量编辑索引弹窗
      indexList: [], //当前文件已索引过的文件列表
      editIndexCurPaper: "", //编辑底稿索引时当前的底稿
      isPcManuPosition: false, // 是否pc底稿定位
      positionFlag: false,
      treeCreatName: "",
      viewType: true, // true目录视图 false列表视图
      btnGroupDrop: true, // 按钮组展开状态
      searchBtnDrop: true, // 检索组展开状态
      dirStateSel: [], // 目录状态检索条件
      fileStateSel: [], // 文件状态检索条件
      fileTypesSel: [], // 文件类型检索条件
      titleSearch: "", // 标题关键字
      contentSearch: "", // 内容关键字
      projectState: "", // 所选项目阶段
      projectStage: [], // 当前项目阶段
      tableListTotal: 0, // 表格数据条目数
      addDirInput: "", // 新建文件夹
      addDirState: false, // 新建文件夹状态
      addVersionData: {}, // 上传新版本选中文件数据
      remarkIsShow: false, // 备注弹框控制
      reMarkData: [], // 备注弹框数据
      isShowSetRemind: false, // 设置提醒显示控制
      startTime: "", // 查询开始时间
      endTime: "",
      chosefilelist: [], // 设置提醒选择文件列表
      remarkList: [], // 单个备注传参
      examType: 2, // 审批类型
      projectData: {}, // 当前项目信息
      projectIndexShow: false, // 索引列表弹框
      projectIndexData: {}, // 索引列表弹框数据
      reviseFileArray: [], // 修订审批数据 需要过滤
      examFileArray: [],
      firstEntry: true, // 是否首次进入页面
      isShowPagination: true,
      selectDir: [], // 已选文件夹
      selectManaullyFile: [], // 手动已选文件
      locationActive: false, // 消息中心提示弹框状态
      locationMsgData: [], // 消息中心定位数据
      lodata: [],
      expandList: [],
      isEnterDir: false, // 定位文件夹时是否进入文件夹
      moreSearchBtnVisible: false,
      moreHandleBtnVisible: false,
      isShowIndexTemplate: false, // 引用目录模板是否展示
      isDirPreview: false, // 目录模版预览
      temPreviewData: {},
      sendList: [
        {
          reportType: 0,
          name: "项目信息报送",
          disabled: false
        },
        {
          reportType: 1,
          name: "抽查文件报送",
          disabled: true
        }
      ],
      complete: "", // 判断报送信息是否完整->是否可报送
      folderTagShow: false, // 是否是目录标签
      labelType: true // 目录未true 文件为false
    };
  },
  computed: {
    selectedNum() {
      return this.$store.state.selectedNum;
    },
    versionMsg() {
      return this.$store.state.versionMsg;
    },
    // 项目信息的报送状态
    messageSendStatus() {
      // console.log(this.$store.state.projectMsg)
      // console.log(this.$store.state.projectMsg.projectMsg.txid)
      let txid = this.$store.state.projectMsg.projectMsg.txid;
      let boolean = txid ? true : false;
      // console.log(boolean)
      if (boolean) {
        this.sendList[1].disabled = false;
      } else {
        this.sendList[1].disabled = true;
      }
      return boolean;
    }
  },
  created() {
    this.isPC = this.$store.state.isPC;
    this.token = this.$store.state.loginObject.userToken;
    this.userId = this.$store.state.loginObject.userId;
    this.pro_id = this.$store.state.projectMsg.pro_id;
    this.oldProjId = this.pro_id;
    this.projectMsg = this.$store.state.projectMsg.projectMsg;
    this.requestCode = this.code.codeNum;
    window.PC.queryPaper = this.queryPaper;
    window.PC.pcUploadDir = this.pcUploadDir;
    window.PC.insertUploadedFilePaper = this.insertUploadedFilePaper;
    // this.getProjectFn();

    this.getTreeDataFn(this.pro_id);
    this.getProjectStage();
    this.updateStoreFile();
    this.reqApi = global.baseUrl;
    if (this.$route.query.isDoubleLocation) {
      // 防止刷新页面重新定位
      return;
    } else if (this.$route.query.locationData) {
      this.docLoction = JSON.parse(this.$route.query.locationData);
      this.listPageNo = this.docLoction.nowPage;
      this.isEnterDir = this.docLoction.isOpen;
    } else if (this.$route.query.isPcPosition) {
      console.log(this.$route.query.data);
      this.docLoction = JSON.parse(this.$route.query.data);
      this.listPageNo = this.docLoction.nowPage;
      this.isEnterDir = this.docLoction.isOpen;
      this.$refs.toggleProject.getProjectList();
    }
  },
  mounted() {
    // console.log(this.$store.state.projectMsg)
    // window.addEventListener('resize', this.getPageHeight);
    window.onResize = () => {
      return (() => {
        this.getPageHeight();
        this.isShowMoreSearchBtn();
      })();
    };
    this.$Mit.watch({
      status: res => {
        this.$Intel.message(
          this.$select.getSelectedData(2, this.pro_id).file.map(item => {
            return {
              id: item.id,
              name: item.docName,
              size: item.docSize,
              type: item.type,
              docId: item.docId
            };
          })
        );
      }
    });
    // 获取DOM元素存储，优化性能
    this.needDomElem.btnGroupBox = document.getElementById("btn_box");
    this.needDomElem.manuBox = document.getElementById("manuscriptmanage");
    this.needDomElem.tableBox = document.getElementById("indexpage_list");
    this.needDomElem.bottomIndex = document.querySelector(".bottom_indexpage");
    this.needDomElem.bottomBox = document.getElementById("bottom_box");
    this.needDomElem.listScrollTop = document.body.querySelector(
      ".el-table__body-wrapper"
    );
    this.getPageHeight();
    this.isShowMoreSearchBtn();
    // $.fn.zTree.getZTreeObj();
  },
  beforeRouteEnter(to, from, next) {
    next(vm => {
      // console.log(to, from);
      // console.log(vm.$route.query.isActive);
      if (!!vm.$route.query.isActive) {
        vm.locationActive = true;
        vm.locationMsgData = JSON.parse(vm.$route.query.data);
        vm.lodata = false;
      } else if (!!vm.$route.query.isActives) {
        // let data = JSON.parse(vm.$route.query.data);
        vm.locationActive = true;
        // vm.locationMsgData = data;
        vm.lodata = JSON.parse(vm.$route.query.searchData);
      }
      if (to.query.isPcPosition == undefined) {
        return;
      }
      vm.isPcManuPosition = true;
      vm.pro_id = to.query.projectId;
      vm.$store.commit("projectId", to.query.projectId);
      this.$refs.toggleProject.getProjectList();
    });
  },
  beforeRouteLeave(to, from, next) {
    to.meta.keepAlive = false;
    window.removeEventListener("resize", this.getPageHeight);
    next();
  },
  watch: {
    versionMsg(val) {
      // docSource 为0是项目文档， 1是底稿管理，2是客户文档
      if (val.docSource != 1) return;

      let idx = this.flieNameData.findIndex(v => v.docId == val.docId);
      // 当前无数据，return
      if (idx < 0) return;

      // 需要更新的数据
      let updatedObj = {
        userName: val.userName,
        docSize: val.docSize,
        updateBy: val.updateBy,
        createUserName: val.userName,
        updateTime: val.updateTime,
        docVersionNumber: val.docVersionNumber,
        docRfs: val.docRfs,
        rfsId: val.docRfs
      };
      val.auditStatus && (updatedObj.auditStatus = val.auditStatus);

      Object.assign(this.flieNameData[idx], updatedObj);

      // 版本号放大样式处理
      let el = $("#manu_table tr")
        .eq(idx + 1)
        .find(".list_time_docVersionNumber");
      el.addClass("rdpulse");
      setTimeout(() => {
        el.removeClass("rdpulse");
      }, 3000);
      console.log(val, 2365);
      if (val.docDescript == "上传新版本") {
        this.clearSelection();
      }
    },
    "$route.fullPath"() {
      if (!this.$route.query.isPcPosition) {
        return;
      }
      //   console.log('testttt');
      this.navArray.length = 0;
      this.isPcManuPosition = true;
      this.docLoction = JSON.parse(this.$route.query.data);
      this.listPageNo = this.docLoction.nowPage;
      this.pro_id = this.$route.query.projectId;
      this.positionFlag = false;
      // 当前页面定位 判断是否为当前项目定位 如果不是进行项目切换
      if (this.newProjId != this.$route.query.projectId) {
        [this.newProjId, this.oldProjId] = [this.oldProjId, this.newProjId];
        this.newProjId = this.$route.query.projectId;
      }
      this.$store.commit("projectId", this.$route.query.projectId);
      this.getTreeDataFn();
      this.$refs.toggleProject.getProjectList();
    },
    examineVisible(newVal, oldVal) {
      if (oldVal) {
        //关闭
        this.examineTreeNode = [];
      }
    },
    "$store.state.asidCollapse"() {
      setTimeout(() => {
        this.getPageHeight();
      }, 350);
    },
    messageSendStatus(newVal, oldVal) {
      // console.log(newVal)
      // console.log(oldVal)
      this.sendList[1].disabled = newVal;
    }
  },
  methods: {
    // 引用模版预览
    indexTemPreview(data) {
      const { id, financeid, temname } = data;
      this.temPreviewData = {
        financeId: financeid,
        dirId: id,
        dirName: temname
      };
      this.isDirPreview = true;
    },
    // 引用模板确定
    indexTemConfirm(id) {
      this.$post("/doc/paper/refSysCatalog", {
        sourceName: "底稿管理",
        projectName: this.projectName,
        paperFlag: true,
        data: {
          projId: this.pro_id,
          id,
          isRefTemplate: "1"
        }
      })
        .then(res => {
          if (res.code != this.requestCode.SUCCESS) {
            this.$message.warning(res.msg);
            return;
          }
          this.isShowIndexTemplate = false;
          this.getTreeDataFn(this.pro_id);
          this.$message.success("引用成功");
          this.clearSelection();
          // 清空底稿复制内容
          this.$store.state.projectDocCopy.docSource == 1 &&
            this.$commit("projectDocPaste", {
              ids: "", //文件ID
              projId: "", //粘贴到的项目ID
              sourceProjId: "", //原项目ID
              parentId: "", //原父级ID
              copyOrCut: "", //已复制或者剪切
              hasCutOrCopy: false,
              seleFileIds: [], //复制剪切时文件id集合
              seleFolderIds: [], //复制剪切时文件夹id集合
              auditProjectId: "",
              docSource: 0 //复制的来源0: 项目文档/ 1: 底稿管理
            });
        })
        .catch(err => console.log(err));
    },
    isShowMoreSearchBtn() {
      //更多按钮是否展示
      let boxH = $(".search_box_left").height() + 16;
      let objH = $(".search-item-box").height();
      this.moreSearchBtnVisible = boxH < objH;
      let toolbarH = $(".btn_box").height();
      let toolbarAutoH = $(".toolbar_manu").height();
      this.moreHandleBtnVisible = toolbarH <= toolbarAutoH;
    },
    //  记录展开元素
    zTreeRecordExpand() {
      let treeObj = this.manuscriptTreeDemo;
      let node = treeObj.getNodes(); //可以获取所有的父节点
      let nodes = treeObj.transformToArray(node); //获取树所有节点
      this.expandList = nodes.filter(v => v.open);
    },
    // 树刷新自动展示到刷新前状态方法
    zTreeDisplay() {
      // 如果处于搜索状态 则直接调搜索方法
      if (this.catalogue_search_input.length !== 0) {
        this.searchDirFn();
        return;
      }
      this.zTreeRecordExpand();
      let treeObj = this.manuscriptTreeDemo;
      // 展开元素为空时直接整体刷新
      if (this.expandList.length === 0) {
        treeObj.reAsyncChildNodes(null, "refresh", true, () => {
          treeObj.selectNode(
            treeObj.getNodeByParam("id", this.workCatalogueParentId)
          );
          treeObj.expandNode(
            treeObj.getNodeByParam("id", this.workCatalogueParentId),
            true,
            true,
            true
          );
        });
        return;
      }
      treeObj.reAsyncChildNodesPromise(null, "refresh").then(() => {
        let node = treeObj.getNodes(); //可以获取所有的父节点
        let nodes = treeObj.transformToArray(node); //获取树所有节点
        this.zTreeExpand(nodes);
      });
    },
    // 递归展开保存节点
    zTreeExpand(list) {
      let treeObj = this.manuscriptTreeDemo;
      let selNode = treeObj.getNodeByParam("id", this.workCatalogueParentId);
      !!selNode && treeObj.selectNode(selNode);
      this.expandList.forEach((item, index) => {
        list.forEach(v => {
          if (item.id == v.id) {
            treeObj.reAsyncChildNodesPromise(v, "refresh").then(() => {
              this.zTreeExpand(v.children, true, false, true);
              // 递归展开之后 调用expandNode方法 展开之前节点
              if (treeObj.getSelectedNodes().length > 0) {
                treeObj.expandNode(treeObj, true, true, true);
              }
              // 最后一个元素 解决最后一个元素不展开的问题
              if (this.expandList.length - 1 === index) {
                const currentNode = treeObj.getNodeByParam(
                  "id",
                  this.workCatalogueParentId
                );
                treeObj.expandNode(currentNode, true, true, true);
              }
            });
          }
        });
      });
    },
    // 初始化页面时更新缓存文件，旨在移除已被删除的文件
    updateStoreFile() {
      let file = this.$select.getSelectedData(2, this.pro_id).file;
      // console.log(123, file);
      if (!file.length) return;
      let idSet = file.map(v => v.id);
      let params = {
        projectId: this.pro_id,
        data: {
          idSet
        }
      };
      this.$post("doc/paper/queryDelFlag", params).then(res => {
        if (res.code !== 0) return;

        let data = res.data;
        let deletedList = [];

        for (let key in data) {
          // console.log(key, data[key])
          data[key] === 1 && deletedList.push({ id: +key, docType: 0 });
        }
        // console.log('deletedList', deletedList)
        this.$select.handleCancel(2, this.pro_id, this.pro_id, deletedList);
      });
    },
    // 已选文件列表跳转
    toSelectList() {
      this.$select.updateStatus(2, this.pro_id, this.pro_id);
      this.updateSelData();
      if (this.selectFileNameArray.length == 0) {
        this.$message.warning("当前无选中文件");
        return;
      }
      this.$router.push({
        path: "/fullsearch",
        query: {
          isSelectList: true
        }
      });
    },
    // 索引粘贴
    indexPasreClick() {
      // 项目状态判断 已终止状态不可操作
      if (
        this.$store.state.projectMsg.projectMsg.endFlag &&
        this.$store.state.projectMsg.projectMsg.endFlag === 1
      ) {
        this.$store.commit("projectStatusTips");
        return;
      }
      if (!this.workCatalogueParentId) {
        this.$message.warning("请先选择目录");
        return;
      }
      let data = this.$store.state.projectDocCopy;
      // 不可跨项目
      if (
        (data.seleFileIds.length == 0 && data.seleFolderIds.length == 0) ||
        data.sourceProjId != this.pro_id
      ) {
        this.$message.warning("请先复制文件或文件夹");
        return;
      }
      this.$post("/doc/paper/linkPaper", {
        sourceName: "底稿管理",
        projectName: this.projectName,
        paperFlag: true,
        data: {
          projectId: this.pro_id,
          docIdSet: data.seleFileIds,
          dirIdSet: data.seleFolderIds,
          docSource: data.docSource,
          paperParentId: this.workCatalogueParentId
        }
      }).then(res => {
        if (res.code != this.requestCode.SUCCESS) {
          this.$message.error(res.msg);
          return;
        }
        console.log("索引粘贴成功了");
        this.getTreeListFn();
        this.zTreeDisplay();
        let seleDirAndFile = [...data.seleFileIds, ...data.seleFolderIds];
        let selectObj = {};
        seleDirAndFile.forEach(v => {
          selectObj[v] = { isLink: 1 };
        });
        setTimeout(() => {
          this.$message.success("索引粘贴成功");
          this.clearSelection();
        }, 1000);
        this.$store.commit("updateStatus", {
          type: 1,
          id: this.pro_id,
          updated: selectObj
        }); //更新前端缓存中项目文档的数据，第一个参数必须是1
      });
    },
    // 普通粘贴按钮点击
    pasreClick() {
      // 项目状态判断 已终止状态不可操作
      if (
        this.$store.state.projectMsg.projectMsg.endFlag &&
        this.$store.state.projectMsg.projectMsg.endFlag === 1
      ) {
        this.$store.commit("projectStatusTips");
        return;
      }
      if (!this.workCatalogueParentId) {
        this.$message.warning("请先选择目录");
        return;
      }
      let data = this.$store.state.projectDocCopy;
      if (data.seleFileIds.length == 0 && data.seleFolderIds.length == 0) {
        this.$message.warning("请先复制文件或文件夹");
        return;
      }
      this.$post("/doc/paper/copyPaper", {
        sourceName: "底稿管理",
        projectName: this.projectName,
        paperFlag: true,
        data: {
          projId: this.pro_id,
          docSource: data.docSource,
          parentId: this.workCatalogueParentId,
          docIdSet: data.seleFileIds,
          dirIdSet: data.seleFolderIds,
          sourceProjId: data.sourceProjId
        }
      })
        .then(res => {
          if (res.code != this.requestCode.SUCCESS) {
            this.$message.error(res.msg);
            return;
          }
          this.getTreeListFn();
          this.zTreeDisplay();
          setTimeout(() => {
            this.$message.success("普通粘贴成功");
          }, 1000);
          this.clearSelection();
        })
        .catch(err => {
          console.log(err);
        });
    },
    // 复制按钮点击
    copyClick() {
      this.$select.updateStatus(2, this.pro_id, this.pro_id);
      this.updateSelData();
      let copyData = [...this.selectManaullyFile, ...this.selectDir];
      if (copyData.length == 0) {
        this.$message.warning("请选择想要复制的文件或文件夹");
        return;
      }
      let seleFileIds = [];
      let seleFolderIds = [];
      copyData.forEach(item => {
        if (item.docType != 1) {
          seleFileIds.push(item.id);
        } else {
          seleFolderIds.push(item.id);
        }
      });
      this.$store.commit("projectDocPaste", {
        ids: copyData.map(v => v.id).join(","),
        copyOrCut: "copy",
        sourceProjId: this.pro_id,
        hasCutOrCopy: true,
        seleFileIds,
        seleFolderIds,
        docSource: 1
      });
      this.$message.success("复制成功");
    },
    // 清空表格排序状态
    clearTableSort() {
      let properTyList = ["docName", "modifyTime", "size"]; // 需要清空列的property
      this.$refs.multipleTable.columns.forEach(item => {
        if (properTyList.indexOf(item.property) !== -1) {
          item.order = "";
        }
      });
    },
    // 取消选择
    clearSelection(type) {
      // 取消table的选中状态
      this.$refs.multipleTable.clearSelection();
      // 清空存储的数据
      this.$select.clearSelection(2, this.pro_id);
      // 取消树选中状态
      //   this.manuscriptTreeDemo.checkAllNodes(false);
      type && this.$message.success("取消选择成功");
    },
    // 点击全选复选框
    handleSelectAll(selection) {
      console.log(selection);

      selection.length
        ? this.$select.handleFileSelect(
            2,
            this.pro_id,
            this.pro_id,
            selection,
            this.zTreeDisplayCallback
          )
        : this.$select.handleCancel(
            2,
            this.pro_id,
            this.pro_id,
            this.flieNameData
          );
      this.updateSelData();
      this.$select.updateStatus(2, this.pro_id, this.pro_id);
      // 多选框砍掉
      // this.manuscriptTreeDemo.getNodesByParam('parentId',this.workCatalogueParentId).forEach(item => {
      //   item.docType == 1 && this.manuscriptTreeDemo.checkNode(item,!!selection.length,true,true)
      // })
    },
    // 点击单条复选框
    handleSelectDoc(selection, row) {
      console.log("select", row);

      this.$select.fileSelect(
        2,
        this.pro_id,
        this.pro_id,
        selection,
        row,
        this.zTreeDisplayCallback
      );
      this.updateSelData();
      // this.$select.updateStatus(2, this.pro_id, this.pro_id)
      // 多选框砍掉
      // if(row.docType != 1) {this.zTreeCallbackDisplay(); return} // 不是目录直接返回
      // 树的选中状态重写
      // this.manuscriptTreeDemo.checkNode(
      //   this.manuscriptTreeDemo.getNodesByParam('id',row.id)[0],
      //   selection.indexOf(row) !== -1,
      //   true,
      //   true
      // )
    },
    // 回显已选文件
    displaySelected() {
      this.$select
        .handleDisplaySelection(2, this.pro_id, this.pro_id, this.flieNameData)
        .then(res => {
          if (!res || !res.length) return;
          res.forEach(v => {
            let idx = this.flieNameData.findIndex(m => m.id === v);
            this.$nextTick(() => {
              if (this.$route.path != "/manuscriptmanage") return;
              this.$refs.multipleTable.toggleRowSelection(
                this.flieNameData[idx],
                true
              );
            });
          });
        });
    },

    // 索引列表按钮
    projectIndexList() {
      this.$select.updateStatus(2, this.pro_id, this.pro_id);
      this.updateSelData();
      if (this.selectFileNameArray.length == 0) {
        this.$message.warning("当前无选中文件");
        return;
      }
      this.projectIndexData = {
        projectId: this.pro_id,
        idSet: this.selectFileNameArray.map(v => v.id),
        docSource: 1
      };
      this.projectIndexShow = true;
    },
    // 索引列表关闭回调
    sendProjectHandle() {
      this.projectIndexShow = false;
    },
    /**
     * 文件/目录审批意见按钮
     * @param {Number} type 1：文件 2：目录
     */

    approvalHandle(type) {
      this.$select.updateStatus(2, this.pro_id, this.pro_id);
      this.updateSelData();
      let arr = this[type == 1 ? "selectFileNameArray" : "selectDir"];
      if (arr.length == 0) {
        this.$message.warning(`请选择${type == 1 ? "文件" : "目录"}`);
        return;
      }
      this.$store.commit("approvalCommentsFn", {
        docSource: 2,
        attach: JSON.stringify(
          arr.map(v => {
            return { docId: type == 1 ? v.docId : v.id, parentId: v.parentId };
          })
        ),
        projectId: this.pro_id,
        isLimit: 2,
        isDir: type == 2,
        sourceName: `底稿管理-${type == 1 ? "文件" : "目录"}审批意见页`
      });
    },
    // 文件/目录审批弹框关闭回调
    docExamClose() {
      this.getTreeListFn();
    },
    docExamMultiple(res) {
      this.$message.warning(res.msg);
      let obj = {
        procTypeName: res.dialogTitle,
        procTypeId: res.procTypeId, // 审批类型id
        finaTypeId: this.$store.state.projectMsg.projectMsg.financingId, // 业务类型id financingId
        finaTypeName: this.$store.state.projectMsg.projectMsg.financingName, // 业务类型 financingName
        projectId: this.$store.state.projectMsg.pro_id, // 项目id
        progStageId: this.$store.state.projectMsg.projectMsg.currentStageId, // 项目阶段id currentImplementStageId
        progStageName: this.$store.state.projectMsg.projectMsg
          .currentImplementStageName // 项目阶段 currentImplementStageName
      };
      this.$Business.processStore(obj);
      this.$router.push("/sponsor");
    },
    docExamCallback() {
      console.log("走我啊");
      this.getTreeListFn();
      this.clearSelection();
    },
    // 修订审批不走审批
    reviseApproveNo() {
      this.$post("/info/audit/updateFileStatusForRevise", {
        data: {
          fileList: this.reviseFileArray.map(v => {
            return { docId: v.docId, parentId: v.parentId };
          })
        }
      }).then(res => {
        if (res.code != this.requestCode.SUCCESS) {
          this.$message.warning(res.msg);
          return;
        }
        this.$message.success("成功");
        this.getTreeListFn();
        this.updateSelData();
        this.clearSelection();
      });
    },
    // 文件审批/目录审批
    fileApprove(procTypeId) {
      // 项目状态判断 已终止状态不可操作
      if (
        this.$store.state.projectMsg.projectMsg.endFlag &&
        this.$store.state.projectMsg.projectMsg.endFlag === 1
      ) {
        this.$store.commit("projectStatusTips");
        return;
      }
      this.examType = procTypeId;
      this.projectData = {
        docParentId: 0,
        pathNameList: this.navArray,
        processId: this.projectMsg.currentImplementStageId,
        processName: this.projectMsg.currentImplementStageName,
        projectCreatBy: this.projectMsg.createBy,
        projectId: this.$store.state.projectMsg.projectMsg.id,
        projectName: this.projectName
      };
      this.$refs.docExam.activeComp();
    },
    // 设置提醒成功后
    remindSuccess() {
      this.clearSelection();
    },
    // 设置提醒弹框关闭回调
    remindClose() {
      this.isShowSetRemind = false;
      this.getTreeListFn();
    },
    // 设置提醒按钮
    setRemindClick() {
      this.$select.updateStatus(2, this.pro_id, this.pro_id);
      this.updateSelData();
      if (this.selectFileNameArray.length == 0) {
        this.$message.warning("当前无选中文件");
        return;
      }
      this.isShowSetRemind = true;
      this.chosefilelist = this.$utils.cloneDeepArray(this.selectFileNameArray);
    },
    // 保存备注
    saveRemark(content) {
      let fileList = this.$utils.cloneDeepArray(this.selectFileNameArray);
      let hash = {};
      fileList = fileList.reduce((item, next) => {
        hash[next.docId] ? "" : (hash[next.docId] = true && item.push(next));
        return item;
      }, []);
      this.$post("/doc/project/addNotes", {
        sourceName: "底稿管理",
        projectName: this.projectName,
        paperFlag: true,
        data: {
          sourceFlag: 1, //项目文档固定为0，底稿为1
          content,
          needFileList: fileList.map(v => {
            return {
              docId: v.docId,
              fileId: v.id
            };
          })
        }
      })
        .then(res => {
          if (this.requestCode.SUCCESS != res.code) {
            this.$message.warning(res.msg);
            return;
          }
          this.remarkIsShow = false;
          this.$message.success("新增备注成功");
          this.clearSelection();
        })
        .catch(function(error) {});
    },
    // 备注按钮
    remarkClick() {
      this.$select.updateStatus(2, this.pro_id, this.pro_id);
      this.updateSelData();
      if (this.selectFileNameArray.length == 0) {
        this.$message.warning("当前无选中文件");
        return;
      }

      if (this.selectFileNameArray.length == 1) {
        this.$post("/doc/project/queryNoteByFileId", {
          sourceName: "底稿管理",
          projectName: this.projectName,
          paperFlag: true,
          data: {
            sourceFlag: 1,
            docId: this.selectFileNameArray[0].docId
          }
        })
          .then(res => {
            if (res.code != this.requestCode.SUCCESS) {
              this.$message.error(res.msg);
              return;
            }
            this.remarkList = res.data;
          })
          .catch(err => {
            console.log(err);
          });
      }

      this.reMarkData = this.selectFileNameArray;
      this.remarkIsShow = true;
    },
    // 备注弹框关闭
    remarkClose() {
      this.remarkIsShow = false;
      this.getTreeListFn();
    },
    // 检索重置
    resetFn() {
      this.titleSearch = "";
      this.contentSearch = "";
      this.projectState = "";
      this.startTime = "";
      this.endTime = "";
      this.$refs.fileState.clearSel();
      this.$refs.fileTypes.clearSel();
      this.$refs.dirState.clearSel();
    },
    // 计算页面高度
    getPageHeight() {
      //   window.setTimeout(() => {
      //     this.tableHeight = (window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight)
      //       - $('.search_box').innerHeight() - 100 - 60
      //   }, 300)

      this.$nextTick(() => {
        $("#bottom_catalogue").height =
          $(".bottom_indexpage").outerHeight() + "px";
        let pageHeight =
          document.documentElement.clientHeight || document.body.clientHeight;
        this.needDomElem.manuBox.style.height = `${pageHeight - 70}px`;
        this.needDomElem.bottomBox.style.width = `${this.needDomElem.tableBox
          .clientWidth - 8}px`;
        this.firstEntry = false;
      });

      // this.$nextTick(() => {
      //   let pageHeight = document.documentElement.clientHeight || document.body.clientHeight;
      //   this.needDomElem.manuBox.style.height = `${ pageHeight - 70 }px`;
      //   this.needDomElem.bottomBox.style.width = this.firstEntry ? `${ this.needDomElem.tableBox.clientWidth - 9 }px`
      //     : `${ this.needDomElem.tableBox.clientWidth - 1 }px`;
      //   this.needDomElem.listScrollTop.style.minHeight = `${ pageHeight - this.needDomElem.btnGroupBox.clientHeight - 290 }px`;
      //   this.firstEntry = false;
      // });
    },
    // 取消新建文件夹
    cancelAdd() {
      this.addDirInput = "";
      this.addDirState = false;
      let delIndex = this.flieNameData.findIndex(v => v.isAddDir);
      if (delIndex !== -1) {
        this.flieNameData.splice(delIndex, 1);
        this.setHideCheckbox("visible");
      }
    },
    // 新建文件夹确定
    addDir() {
      this.nameFilter(true, this.addDirInput)
        .then(res => {
          this.addDirInput = res;
          if (this.addDirInput == "") {
            this.$message.warning("请输入内容");
            return;
          }
          this.$post("/doc/paper/insert", {
            pageNo: this.pageNo,
            pageSize: this.pageSize,
            sourceName: "底稿管理",
            projectName: this.projectName,
            paperFlag: true,
            data: {
              docType: 1,
              parentId: this.workCatalogueParentId || 0,
              projectId: this.newProjId || this.pro_id,
              docId: "",
              docName: this.addDirInput
            }
          })
            .then(res => {
              if (res.code != this.requestCode.SUCCESS) {
                this.$message.error(res.msg);
                return;
              }
              this.getTreeListFn();
              this.cancelAdd();
              const node = this.manuscriptTreeDemo.getNodeByParam(
                "id",
                this.workCatalogueParentId,
                null
              );
              if (this.zNodes.length) {
                // 左侧有目录
                this.manuscriptTreeDemo.reAsyncChildNodes(node, "refresh");
              } else {
                this.getTreeDataFn();
                this.manuscriptTreeDemo.selectNode(node);
              }
              this.$message.success("新建成功");
            })
            .catch(err => {
              console.log(err);
            });
        })
        .catch(res => {
          this.addDirInput = res;
        });
    },
    // 新建文件夹
    addListDir() {
      console.log(this.addDirState);
      // 项目状态判断 已终止状态不可操作
      if (
        this.$store.state.projectMsg.projectMsg.endFlag &&
        this.$store.state.projectMsg.projectMsg.endFlag === 1
      ) {
        this.$store.commit("projectStatusTips");
        return;
      }
      if (this.addDirState) return;
      if (!this.pro_id) {
        this.$message.warning("请先选择项目");
        return;
      }
      if (!this.$utils.checkSystemPermission("paper_add_atalog")) {
        this.$message.warning("您无对应的项目角色权限/后台权限");
        return;
      }
      this.addDirState = true;
      this.flieNameData.unshift({
        isAddDir: true
      });
      this.setHideCheckbox("hidden");
    },
    // 视图切换
    viewChange() {
      this.viewType = !this.viewType; // true目录视图 false列表视图
      this.listPageNo = 0;
      this.getTreeListFn();
      this.getPageHeight();
    },
    // 切换页码
    handleCurrentChange(val) {
      this.listPageNo = val - 1;
      this.getTreeListFn();
    },
    // 分页器切换页码
    handleSizeChange(val) {
      this.listPageSize = val;
      this.getTreeListFn();
    },
    // 讨论
    discussionFn() {
      if (!this.$store.state.proChatIsShow) {
        this.$message.warning("当前无权限");
        return;
      }
      this.$select.updateStatus(2, this.pro_id, this.pro_id);
      this.updateSelData();
      let discussionData = [...this.selectManaullyFile, ...this.selectDir];
      if (discussionData.length == 0) {
        this.$message.warning("当前无选中文件或文件夹");
        return;
      }
      if (discussionData.length > 1) {
        this.$message.warning("多文件无法操作，请重新选择");
        return;
      }
      discussionData[0].paperId = discussionData[0].id;
      this.$router.push({
        path: "/projecchat",
        query: {
          docData: JSON.stringify(discussionData[0]),
          sourceName: "底稿管理"
        }
      });
    },
    // 左侧树点多选按钮触发
    zTreeOnCheckFn(event, treeId, item) {
      // 可能出现选择父目录，子目录也需要选中
      let zTreeChecked = this.manuscriptTreeDemo.getCheckedNodes();
      console.log(zTreeChecked);
      console.log(item);
      if (zTreeChecked.indexOf(item) !== -1) {
        // 选中
        zTreeChecked.forEach(ztree => {
          this.flieNameData.forEach(val => {
            if (ztree.id == val.id) {
              this.$refs.multipleTable.toggleRowSelection(val, true);
              this.$select.handleFileSelect(2, this.pro_id, this.pro_id, [val]);
            }
          });
        });
        return;
      }
      // 取消选择 判断是否取消的是
      if (zTreeChecked.length == 0) {
        this.flieNameData.forEach(val => {
          val.docType == 1 &&
            this.$refs.multipleTable.toggleRowSelection(val, false);
          val.docType == 1 &&
            this.$select.handleFileSelect(2, this.pro_id, this.pro_id, [val]);
        });
        return;
      }
      this.flieNameData.forEach(val => {
        if (item.id == val.id) {
          console.log(item);
          this.$refs.multipleTable.toggleRowSelection(val, false);
          this.$select.handleFileSelect(2, this.pro_id, this.pro_id, [val]);
          return;
        }
      });
    },
    // 请求项目阶段
    getProjectStage() {
      this.$post("/info/project/getImplementStageList", {
        data: {
          projectId: this.pro_id
        }
      })
        .then(res => {
          if (res.code != this.requestCode.SUCCESS) {
            this.$message(res.msg);
            return;
          }
          this.projectStage = res.data;
        })
        .catch(err => {});
    },
    // 查询按钮
    search() {
      this.$router.push({
        path: "/fullsearch",
        query: {
          searchData: JSON.stringify({
            titleSearch: this.titleSearch,
            contentSearch: this.contentSearch,
            projectState: this.projectState,
            dirState: this.dirStateSel,
            fileState: this.fileStateSel,
            fileTypes: this.fileTypesSel,
            startTime: this.startTime,
            endTime: this.endTime
          })
        }
      });
    },
    // 设置表格第一行是否显示选择框
    setHideCheckbox(visibilityVal) {
      // visibilityVal: string
      this.$nextTick(() => {
        $(
          ".el-table .el-table__body tbody .el-table__row:first td:first-child .cell"
        ).css("visibility", visibilityVal);
      });
    },
    // 目录状态选择
    dirStateChangeData(arr) {
      this.dirStateSel = arr.map(v => v.value);
    },
    // 文件状态选择
    fileStateChangeData(arr) {
      this.fileStateSel = arr.map(v => v.value);
    },
    // 文件类型选择
    fileTypesChangeData(arr) {
      this.fileTypesSel = arr.map(v => v.value);
    },
    // 按钮组展开收起
    btnBoxToggle(val) {
      this[val] = !this[val];
      this.getPageHeight();
    },
    // PC端上传文件夹回调
    pcUploadDir(projectId, parentId) {
      if (projectId != this.pro_id) {
        return;
      }
      let node = this.manuscriptTreeDemo.getNodesByParam("id", parentId)[0];
      this.manuscriptTreeDemo.reAsyncChildNodes(node, "refresh", false);
    },
    // PC端上传处理
    handleUpload(v) {
      // 项目状态判断 已终止状态不可操作
      if (
        this.$store.state.projectMsg.projectMsg.endFlag &&
        this.$store.state.projectMsg.projectMsg.endFlag === 1
      ) {
        this.$store.commit("projectStatusTips");
        return;
      }
      if (this.zNodes.length == 0) {
        this.$message.warning("左侧暂无目录，无法进行上传操作");
        return;
      }
      this.isPC ? this.handleUploadPC(v) : this.handleUploadWeb(v);
    },
    handleUploadPC(v) {
      // 项目状态判断 已终止状态不可操作
      if (
        this.$store.state.projectMsg.projectMsg.endFlag &&
        this.$store.state.projectMsg.projectMsg.endFlag === 1
      ) {
        this.$store.commit("projectStatusTips");
        return;
      }
      let data = {
        parentId: this.manuscriptTreeDemo.getSelectedNodes()[0].id, //父级目录
        projId: this.newProjId || this.pro_id, // 项目id
        auditProjId: null, // 项目阶段id
        docsource: 1, // 文件来源   1 底稿  0 项目文档   2 客户
        sourceName: "底稿管理",
        projectName: this.projectName,
        paperFlag: true
      };
      switch (v) {
        case "file": // 文件上传
          window.ChromeMain.CS_Main_UploadDoc(JSON.stringify(data));
          break;
        case "dict": // 文件夹上传
          window.ChromeMain.CS_Main_SingleFolderUpload(JSON.stringify(data));
          break;
        case "scan": // 扫描上传
          window.ChromeMain.CS_Main_ShowKodakScan(JSON.stringify(data));
          break;
        case "mulit": //多文件及多文件夹上传
          window.ChromeMain.CS_Main_batchUpload(JSON.stringify(data));
      }
    },
    handleUploadWeb(v) {
      this.uploadingFn(v);
    },

    queryPaper(projectId, parentId) {
      // PC端上传成功后刷新列表, 如果当前目录不是上传时的目录则不刷新页面
      if (
        this.isPC &&
        parentId != this.workCatalogueParentId &&
        parentId != undefined
      ) {
        return;
      }
      this.getTreeListFn();
    },
    /**
     * @param {Array,Object}
     * 查文件目录
     */
    filePath(val) {
      this.$post("/doc/project/link/docPath", {
        data: {
          paperIdSet: Array.isArray(val) ? val.map(v => v.id) : [val.id]
        }
      })
        .then(res => {
          if (res.code != 0) {
            this.$message.error(res.msg);
            return;
          }
          Object.keys(res.data.docPaper).forEach(id => {
            this.flieNameData.forEach(item => {
              id == item.id &&
                this.$set(
                  item,
                  "fullPath",
                  res.data.docPaper[id].reverse().join(" / ")
                );
            });
          });
        })
        .catch(err => {
          console.log(err);
        });
    },
    /**
     * @param {Array,Object} val
     * @param {Array} 指定数组数据
     * 查文件审批状态，小图标状态，底稿关联文件，自定义标签
     */
    labelList(val, arr = this.flieNameData) {
      this.$post("/doc/paper/docStatusAll", {
        data: {
          idSet: Array.isArray(val) ? val.map(v => v.id) : [val.id],
          projectId: this.newProjId || this.pro_id
        }
      })
        .then(response => {
          if (response.code == -503) {
            return;
          }
          if (response.code != this.requestCode.SUCCESS) {
            this.$message.error(response.msg);
            return;
          }
          Object.keys(response.data).forEach(id => {
            arr.forEach(item => {
              if (id == item.id) {
                let resItem = response.data[id];
                this.$set(item, "icon", resItem.paperLabelList);
                this.$set(item, "indexPaper", resItem.linkList);
                // 0:待审核/1:审批通过/2:驳回未修改/3:节点审批通过/4:待审批/5:驳回已修改/6:修订审批中/7:修订中/8:已归档
                this.$set(item, "auditStatus", resItem.auditStatus);
                this.$set(item, "notes", resItem.notes); // 是否有备注信息
                this.$set(item, "reminder", resItem.reminder); // 是否有文件提醒
                this.$set(item, "lockState", resItem.lockState); // 是否有锁
                this.$set(item, "record", resItem.record); // 是否有审批意见
                this.$set(item, "isShowIcon", true); // 防止图标闪烁
              }
            });
          });
        })
        .catch(err => {
          console.log(err);
        });
    },
    newLaber(item) {
      this.folderTagShow = true;
      // 1 目录 0 文件
      this.labelType = item.docType == 1 ? true : false;
      console.log(item);
      this.laberTruesitem = item;
    },
    sort_change(column) {
      // 退出新建文件夹状态console.log
      this.cancelAdd();
      // this.listPageNo = 0;
      //  排序
      // 排序条件为null时保留上次排序状态
      if (column.order != null) {
        console.log(column);
        let order = column.order;
        switch (column.prop) {
          case "docName":
            this.orderFlag = order == "ascending" ? 5 : 6;
            break;
          case "size":
            this.orderFlag = order == "ascending" ? 3 : 4;
            break;
          case "modifyTime":
            this.orderFlag = order == "ascending" ? 1 : 2;
            break;
          default:
            this.orderFlag = "";
        }
      }
      this.getTreeListFn(false);
    },
    folderTagSubmit(val) {
      // this.laberTrues = false;
      this.orderFlag = "";
      this.clearTableSort();
      // if (val == 1) {
      //   return;
      // }
      this.labelList(this.laberTruesitem);
    },
    citeCatalogDialogFns() {
      this.citeCatalogDialogFnre = true;
    },
    citeCatalogs() {
      this.citeCatalogDialogFnre = false;
    },
    searchDirFn() {
      //搜索目录函数
      if (this.catalogue_search_input == "") return; //输入为空时,点搜索就返出去
      this.searchIdx = 1;
      this.$post("/doc/paper/searchDir", {
        data: {
          docName: this.catalogue_search_input,
          projectId: this.newProjId ? this.newProjId : this.pro_id
        }
      })
        .then(res => {
          if (this.requestCode.SUCCESS == res.code) {
            this.dirNum = res.data.num;
            this.dirData = res.data.content;
            this.searchEmpty = false;
            $.fn.zTree.init($("#manuscriptTree"), this.setting, this.zNodes);
            var ls = this.manuscriptTreeDemo.reAsyncChildNodesPromise(
              this.zNodes[0],
              "refresh"
            ); //每次搜索都需要去异步刷新出
            ls.then(() => {
              var nodes = this.manuscriptTreeDemo.getNodes(); //获取整个树数据
              this.searchDataFn(nodes); //调用处理树的函数
            });
          } else {
            $.fn.zTree.init($("#manuscriptTree"), this.setting, []);
            this.searchEmpty = true;
            this.flieNameData = [];
            this.$message({
              message: res.msg,
              type: "error"
            });
          }
        })
        .catch(error => {
          console.log(error);
        });
    },
    searchChange() {
      // 搜索输入框清空时
      if (this.catalogue_search_input == "") {
        const preSearchState = this.searchEmpty;
        this.searchEmpty = false;
        this.dirData.splice(0);
        this.dirNum = 0;
        this.searchIdx = 0;
        // 搜索状态下 清空 特殊处理  记录不到展开的元素
        if (preSearchState) {
          const nodes = this.manuscriptTreeDemo.getNodes()[0];
          this.manuscriptTreeDemo.selectNode(nodes);
          this.manuscriptTreeDemo.expandNode(nodes, true, true, true);
          this.workCatalogueParentId = nodes.id;
          this.getTreeListFn(nodes[0]); // 同步请求右边的数据列表
          if (this.navArray.length == 0) {
            // 用于处理nav导航数据
            this.navArray.push(nodes);
          } else {
            this.navArray = [];
            this.navFilterFn(nodes);
          }
          return;
        }
        this.zTreeDisplay();
        // $.fn.zTree.init($('#manuscriptTree'), this.setting, this.zNodes);
        // var ls = this.manuscriptTreeDemo.reAsyncChildNodesPromise(
        //   this.zNodes[0],
        //   'refresh'
        // ); // 每次搜索都需要去异步刷新出
        // ls.then(() => {
        //   var nodes = this.manuscriptTreeDemo.getNodes(); // 获取整个树数据
        //   this.searchClearDataFn(nodes); // 调用处理树的函数
        // this.dirNum = 0;
        // this.searchIdx = 0;
        // });
      }
    },
    searchDataFn(node) {
      //搜索后数据的处理函数 node 为整个树形数据
      for (let i in this.dirData) {
        //循环搜索结果数据
        for (let j in node) {
          //循环树形数据
          if (this.dirData[i].id == node[j].id) {
            //两者匹配唯一的id
            if (this.dirData[i].disabled) {
              //是否有高亮字段的判断
              // console.log(node[j])
              // node[j].searchBack = true;
              this.$set(node[j], "searchBack", true);
              // return;
            }
            var ls = this.manuscriptTreeDemo.reAsyncChildNodesPromise(
              node[j],
              "refresh"
            );
            ls.then(() => {
              this.searchDataFn(node[j].children); //每次调用自己打开下一个函数
              if (node[j].id == this.dirData[this.dirData.length - 1].id) {
                //判断是否是数组最后一个数 减少请求的
                var nodes = this.manuscriptTreeDemo.getNodesByParam(
                  "searchBack",
                  true,
                  null
                ); //获取所有高亮数据
                console.log(nodes);
                this.manuscriptTreeDemo.selectNode(nodes[0]); //设置数据第一个为高亮
                this.getTreeListFn(nodes[0]); //同步请求右边的数据列表
                if (this.navArray.length == 0) {
                  //用于处理nav导航数据
                  this.navArray.push(nodes[0]);
                } else {
                  this.navArray = [];
                  this.navFilterFn(nodes[0]);
                }
              }
            });
          }
        }
      }
      console.log(node);
    },
    searchClearDataFn(node) {
      for (let i in this.dirData) {
        //循环搜索结果数据
        for (let j in node) {
          //循环树形数据
          if (this.dirData[i].id == node[j].id) {
            //两者匹配唯一的id
            if (this.dirData[i].disabled) {
              //是否有高亮字段的判断
              node[j].searchBack = false;
              // return;
            }
            var ls = this.manuscriptTreeDemo.reAsyncChildNodesPromise(
              node[j],
              "refresh"
            );
            ls.then(() => {
              this.searchClearDataFn(node[j].children); //每次调用自己打开下一个函数
              if (node[j].id == this.dirData[this.dirData.length - 1].id) {
                //判断是否是数组最后一个数 减少请求的
                this.dirData = [];
              }
            });
          }
        }
      }
    },
    setSearchFontCss(treeId, treeNode) {
      //z-tree 的api方法 处理高亮的
      return treeNode.searchBack
        ? {
            background: "#e2ecff"
          }
        : {};
    },
    searchUpNode() {
      //上一个高亮数据
      var nodes = this.manuscriptTreeDemo.getNodesByParam(
        "searchBack",
        true,
        null
      );
      if (nodes.length == 0) return;
      this.searchIdx--;
      if (this.searchIdx < 1) {
        this.searchIdx = 1;
        return;
      }
      const currentNode = nodes[this.searchIdx - 1];
      this.manuscriptTreeDemo.selectNode(currentNode); //选中当前的树
      this.workCatalogueParentId = currentNode.id;
      // this.manuscriptTreeDemo.reAsyncChildNodes(currentNode, "refresh");  //异步加载当前数据
      this.getTreeListFn(currentNode); //同步请求右边的数据列表
      if (this.navArray.length == 0) {
        //用于处理nav导航数据
        this.navArray.push(currentNode);
      } else {
        this.navArray = [];
        this.navFilterFn(currentNode);
      }
    },
    searchDownNode() {
      //下一个高亮数据
      var nodes = this.manuscriptTreeDemo.getNodesByParam(
        "searchBack",
        true,
        null
      );
      if (nodes.length == 0) return;
      this.searchIdx++;
      if (this.searchIdx > nodes.length) {
        this.searchIdx = nodes.length;
        return;
      }
      const currentNode = nodes[this.searchIdx - 1];
      this.manuscriptTreeDemo.selectNode(currentNode);
      this.workCatalogueParentId = currentNode.id;
      // var nodeParent = this.manuscriptTreeDemo.getNodeByParam("id", itemValue.parentId, null);
      // this.manuscriptTreeDemo.reAsyncChildNodes(currentNode, "refresh");
      this.getTreeListFn(currentNode);
      if (this.navArray.length == 0) {
        this.navArray.push(currentNode);
      } else {
        this.navArray = [];
        this.navFilterFn(currentNode);
      }
    },
    switchProjectFn(projectData) {
      this.pro_id = projectData.id;
      this.newProjId = projectData.id;
      this.projectName = projectData.name;
      this.projectMsg = projectData;
      //项目切换
      if (this.isPcManuPosition) {
        // pc底稿定位 切换项目清空query
        this.$router.push(this.$route.path);
        this.isPcManuPosition = false;
      }
      this.orderFlag = "";
      this.clearTableSort();
      this.parentIdData = "";
      this.rightMenuIsShow = false;
      this.workCatalogueParentId = "";

      this.getTreeDataFn(this.pro_id);
      this.getProjectStage();
      this.copyStoreData.newProjId = this.pro_id;
      this.$store.commit("manuscriptCopyFn", this.copyStoreData);
      this.$utils.queryProExamNum(this.pro_id);

      this.updateStoreFile();
    },
    getTreeDataFn(itemId = null) {
      this.$post("/doc/paper/query", {
        pageNo: this.pageNo,
        pageSize: this.pageSize,
        data: {
          docType: 1,
          parentId: "0",
          projectId: itemId || this.pro_id
        }
      })
        .then(res => {
          if (this.requestCode.SUCCESS == res.code) {
            this.zNodes = res.data.content;
            this.zNodes.forEach(item => {
              if (item.fileSum <= 0) {
                item.isParent = true;
                item.iconSkin = "diy02";
                item.checked = false;
              } else {
                if (item.docType === 1) {
                  item.isParent = true;
                  item.iconSkin = "diy01";
                  item.checked = false;
                }
              }
            });
            this.getTreeListFn(this.zNodes[0]);

            // console.log(this.zNodes[0])

            if (res.data.content.length != 0) {
              if (this.navArray.length != 0) {
                this.navArray[0] = this.zNodes[0];
                this.navArray.splice(1);
              } else {
                this.navArray.push(this.zNodes[0]);
                this.workCatalogueName = this.zNodes[0].docName;
                this.workCatalogueParentId = this.zNodes[0].id;
              }
            } else {
              this.navArray = [];
            }
            $.fn.zTree.init($("#manuscriptTree"), this.setting, this.zNodes);
            this.manuscriptTreeDemo = $.fn.zTree.getZTreeObj("manuscriptTree"); //将目录树对象赋值给全局使用
            var nodes = this.manuscriptTreeDemo.getNodes();
            this.manuscriptTreeDemo.selectNode(nodes[0]);
            !!nodes.length && (this.workCatalogueParentId = nodes[0].id);
            if (res.data.content.length === 0) return;
            this.manuscriptTreeDemo
              .reAsyncChildNodesPromise(nodes[0], "refresh")
              .then(() => {
                if (!!nodes[0]) {
                  // 解决根目录下文件无法定位的问题
                  this.locationFn(nodes);
                }
              });
          } else {
            this.$message({
              message: res.msg,
              type: "error"
            });
          }
        })
        .catch(error => {
          console.log(error);
        });
    },
    /**
     * @param {} updateId 更新选中数据id
     */
    getTreeListFn(itemValue, updateId) {
      //获取初始树列表
      let parentId =
        itemValue != null && !!itemValue
          ? itemValue.id
          : this.workCatalogueParentId;
      this.$post(
        `${
          this.viewType
            ? "/doc/paper/query"
            : "/doc/paper/queryPapaerTiledDisplay"
        }`,
        {
          pageNo: this.listPageNo,
          pageSize: this.listPageSize,
          data: {
            parentId: this.viewType ? parentId : "",
            orderFlag: this.orderFlag,
            projectId: this.newProjId || this.pro_id
          }
        }
      )
        .then(res => {
          if (this.requestCode.SUCCESS != res.code) {
            this.$message.error(res.msg);
            return;
          }
          if (
            res.data.totalPages < res.data.number &&
            res.data.totalPages != 0
          ) {
            this.listPageNo = res.data.totalPages - 1;
            this.getTreeListFn();
            return;
          }
          this.renameFlag = true;
          this.flieNameData = res.data.content;
          this.tableListTotal = res.data.totalElements;
          this.labelList(this.flieNameData);
          !this.viewType && this.filePath(this.flieNameData);
          this.flieNameData.map(item => {
            item.isEdit = false;
            item.isAddDir = false;
            this.iconFilter(item);
          });
          if (!!updateId) {
            this.flieNameData.forEach(item => {
              updateId == item.id &&
                this.$select.handleFileSelect(2, this.pro_id, this.pro_id, [
                  item
                ]);
            });
          }
          // this.zTreeCallbackDisplay()
          this.displaySelected();
        })
        .catch(err => {
          console.log(err);
        });
    },

    locationFn(node) {
      //定位数据处理函数
      for (let i in this.docLoction.parent) {
        for (let j in node) {
          if (this.docLoction.parent[i].id == node[j].id) {
            this.manuscriptTreeDemo.selectNode(node[j]);
            var ls = this.manuscriptTreeDemo.reAsyncChildNodesPromise(
              node[j],
              "refresh"
            );
            ls.then(() => {
              const selNode = this.manuscriptTreeDemo.getSelectedNodes()[0];
              if (this.docLoction.parentId == selNode.id) {
                this.workCatalogueParentId = this.docLoction.parentId;
                this.listPageNo = this.docLoction.nowPage;
                // 强制重载组件 正确选中页码
                this.isShowPagination = false;
                this.$router.replace({
                  path: "/manuscriptmanage",
                  query: {
                    isDoubleLocation: true
                  }
                });
                this.$nextTick(() => {
                  this.isShowPagination = true;
                  !this.docLoction.isOpen && this.getTreeListFn();
                  setTimeout(() => {
                    this.flieNameData.forEach((item, idx) => {
                      if (item.id == this.docLoction.id) {
                        console.log("定位到了，文件id是", this.docLoction.id);
                        this.$select.handleFileSelect(
                          2,
                          this.pro_id,
                          this.pro_id,
                          [item]
                        );
                        this.$refs.multipleTable.toggleRowSelection(item, true);
                        let manuBox = $("#el_main .el-scrollbar__wrap");
                        manuBox.animate(
                          { scrollTop: manuBox.outerHeight(true) },
                          300
                        );
                        $(this.needDomElem.bottomIndex).animate(
                          {
                            scrollTop:
                              $(
                                `.el-table .el-table__body tbody .el-table__row:nth-child(${idx})`
                              ).prop("offsetTop") + 53
                          },
                          300
                        );
                        this.positionFlag = true;
                      }
                    });
                  }, 1000);
                });
              }
              this.locationFn(node[j].children);
              // 项目聊天文件夹打开逻辑
              if (
                this.docLoction.isOpen &&
                node[j].id == this.docLoction.parent[0].id
              ) {
                this.workCatalogueParentId = this.docLoction.id;
                this.getTreeListFn();
              }
              if (this.navArray.length == 0) {
                this.navArray.push(node[i]);
              } else {
                this.navArray = [];
                this.docLoction.parent.map((item, index) => {
                  let obj = [];
                  obj.docName = item.docName;
                  obj.id = item.id;
                  this.navArray.unshift(obj);
                });
              }
            });
          }
        }
      }
    },
    leftKey(e) {
      //左键处理事件
      if (e.button == 0) {
        this.rightMenuIsShow = false;
      }
    },
    getAsyncUrl() {
      //配置底稿目录树请求地址
      return `${this.reqApi}/doc/paper/query`;
      // return 'http://192.168.6.230:212/doc/paper/query'
    },
    getAsyncData(treeId, treeNode) {
      //配置底稿目录树请求数据
      if (treeNode) {
        return {
          token: this.token,
          userId: this.userId,
          pageNo: this.pageNo,
          pageSize: this.pageSize,
          data: {
            docType: treeNode.docType,
            parentId: treeNode.id,
            projectId: this.newProjId ? this.newProjId : this.pro_id
          }
        };
      } else {
        return {
          token: this.token,
          userId: this.userId,
          pageNo: this.pageNo,
          pageSize: this.pageSize,
          data: {
            docType: 1,
            parentId: 0,
            projectId: this.newProjId ? this.newProjId : this.pro_id
          }
        };
      }
    },
    onAsyncSuccessFn(event, treeId, treeNode, msg) {
      //异步树成功加载
      var zTree = $.fn.zTree.getZTreeObj(treeId);
      zTree.updateNode(treeNode); // 异步加载成功后刷新树节点
    },
    treeFilterFn(treeId, parentNode, responseData) {
      //异步加载过滤树
      if (responseData.code == this.requestCode.ARGUMENT_ERROR) {
        return this.$message.error(res.msg);
      } else if (responseData.code == this.requestCode.DOC_FIlE_TYPE_MISMATCH) {
        return;
      } else {
        responseData.data.content.forEach(item => {
          // console.log(item.fileSum,'____',item)
          if (item.fileSum <= 0) {
            item.isParent = true;
            item.iconSkin = "diy02";
            item.checked = false;
          } else {
            if (item.docType === 1) {
              item.isParent = true;
              item.iconSkin = "diy01";
              item.checked = false;
            }
          }
        });
        // responseData.data.content.length != 0 && this.labelList(responseData.data.content,responseData.data.content)
        // if(this.dirData.length != 0) {
        //     for( let i in this.dirData) {
        //         for(let j in responseData.data.content) {
        //             if(this.dirData[i].id == responseData.data.content[j].id ) {
        //                 if(this.dirData[i].disabled) {
        //                     responseData.data.content[j].searchBack = true;
        //                 }
        //             }
        //         }
        //     }

        // }
        return responseData.data.content;
      }
    },
    // 树回显
    /**
     * 多选
     *
    zTreeCallbackDisplay() {
      // this.$message.success('树回显')
      this.updateSelData();
      this.$nextTick(() => {
        try{
          let zTree = $.fn.zTree.getZTreeObj('manuscriptTree');
          if(this.selectDir.length == 0) {
            zTree.checkAllNodes(false);
          }
          this.selectDir.forEach(item => {
            let treeData = zTree.getNodeByParam('id',item.id);
            zTree.checkNode(treeData,true,true,true)
          })
        }catch(err) {
          console.log(err)
        }
      })
    },
    */
    zTreeOnClickFn(e, treeId, treeNode) {
      //点击树
      this.orderFlag = "";
      this.clearTableSort();
      // 退出新建状态
      this.cancelAdd();
      this.manuscriptTreeDemo.expandNode(treeNode);
      this.targetTreeNode = treeNode;
      this.clickType = 1;
      this.workCatalogueName = treeNode.docName;
      this.workCatalogueParentId = treeNode.id;
      this.parentIdData = treeNode;
      // console.log(treeNode)
      this.listPageNo = 0;
      this.needDomElem.listScrollTop.scrollTop = 0;
      var nodes = this.manuscriptTreeDemo.getNodesByParam(
        "searchBack",
        true,
        null
      ); //获取所有高亮数据
      if (this.dirData.length != 0) {
        nodes.map((item, idx) => {
          if (item.id == treeNode.id) {
            this.searchIdx = idx + 1;
          }
        });
      }
      if (treeNode.id) {
        this.getTreeListFn(treeNode);
      } else {
        this.flieNameData = [];
        return;
      }
      if (this.navArray.length == 0) {
        this.navArray.push(treeNode);
      } else {
        this.navArray = [];
        this.navFilterFn(treeNode);
      }
    },
    operationAddFn() {
      //树的添加操作
      if (!this.pro_id) {
        this.$message.warning("请先选择项目");
        return;
      }
      if (!this.$utils.checkSystemPermission("paper_add_atalog")) {
        this.$message.warning("您无对应的项目角色权限/后台权限");
        return;
      }
      var nodes = this.manuscriptTreeDemo.getSelectedNodes();
      var treeNode = nodes[0];
      if (treeNode) {
        treeNode = this.manuscriptTreeDemo.addNodes(treeNode, {
          parentId: treeNode.id,
          docType: 1,
          isParent: true,
          highlightName: "新建文件夹",
          docName: "新建文件夹",
          iconSkin: "diy01"
        });
      } else {
        treeNode = this.manuscriptTreeDemo.addNodes(treeNode, {
          parentId: "0",
          docType: 1,
          isParent: true,
          highlightName: "新建文件夹",
          docName: "新建文件夹",
          iconSkin: "diy01"
        });
      }
      if (treeNode) {
        this.manuscriptTreeDemo.editName(treeNode[0]);
      }
      this.treeCreatName = treeNode[0];
    },
    operationDelFn() {
      //树的删除操作
      var nodes = this.manuscriptTreeDemo.getSelectedNodes();
      if (!this.zNodes || !this.zNodes.length || this.searchEmpty) {
        this.$message.warning("暂无数据不能删除");
        return;
      }
      if (!nodes.length) {
        this.$message.warning("请选择数据进行删除");
        return;
      }
      console.log(123, nodes, this.zNodes);

      this.$confirm("此操作将永久删除该目录, 是否继续?", "提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning"
      })
        .then(() => {
          this.loading = this.$loading({
            lock: true,
            text: "数据过多正在删除中",
            spinner: "el-icon-loading",
            background: "rgba(0, 0, 0, 0.7)"
          });
          var nodes = this.manuscriptTreeDemo.getSelectedNodes();
          for (var i = 0, l = nodes.length; i < l; i++) {
            // this.manuscriptTreeDemo.removeNode(nodes[i],this.zTreeBeforeRemoveFn);
            this.zTreeBeforeRemoveFn(nodes[i].id, nodes[i]);
          }
        })
        .catch(() => {});
    },
    zTreeBeforeRemoveFn(treeId, treeNode) {
      //删除树之前的回调
      let quoteIdList = [];
      let dirIds = [];
      treeNode.quoteId
        ? quoteIdList.push(treeNode.id)
        : dirIds.push(treeNode.id);
      var data = {
        token: this.token,
        userId: this.userId,
        sourceName: "底稿管理",
        projectName: this.projectName,
        paperFlag: true,
        data: {
          docIds: treeNode.id,
          quoteId: treeNode.quoteId,
          quoteIdList: quoteIdList, // 引用的目录
          dirIds: dirIds, // 自己创建的目录
          docPaperIds: [], // 文件
          parentId: treeNode.parentId
        }
      };
      this.$post("/doc/paper/deletePaperDoc", data)
        .then(res => {
          this.loading.close();
          if (this.requestCode.SUCCESS != res.code) {
            this.$message.error(res.msg);
            return false;
          }
          this.delEchoingFn(treeNode, 1);
          return true;
        })
        .catch(error => {
          this.loading.close();
          console.log(error);
        });
    },
    operationEditFn() {
      //树的编辑操作
      var nodes = this.manuscriptTreeDemo.getSelectedNodes();
      console.log("文件", nodes);
      // this.renamePowerTest(nodes[0], nodes[0].docName ,1).then(res => {
      //     if(!res){
      //         this.$message({
      //             message: '您无对应的项目角色权限/后台权限',
      //             type: "warning"
      //         });
      //         return;
      //     } else {
      this.isReName(nodes[0].id).then(res => {
        if (res) {
          this.isEditFlag = true;
          this.manuscriptTreeDemo.editName(nodes[0]);
        }
      });

      //     }
      // })
    },
    zTreeBeforeRenameFn(treeId, treeNode, newName, isCancel) {
      let flag = true;
      //树编辑之前的回调
      if (this.isEditFlag) {
        if (newName != "") {
          if (newName == treeNode.docName) {
            flag = true;
          } else {
            this.renameEchoingFn(treeNode, newName, 1);
          }
        } else {
          this.manuscriptTreeDemo.setEditable(false);
          this.manuscriptTreeDemo.selectNode(treeNode);
          this.isEditFlag = false;
          flag = false;
        }
      } else {
        if (newName != "") {
          flag = true;
        } else {
          this.manuscriptTreeDemo.removeNode(treeNode);
          flag = false;
        }
      }
      if (!flag) {
        this.zTreeDisplay();
      }
      return flag;
    },
    async zTreeOnRenameFn(event, treeId, treeNode, isCancel) {
      console.log(treeNode);
      //树重命名的回调
      if (treeNode.highlightName.length > 250) {
        this.$message.warning("最多可输入250个字");
        var nodeParent2 = this.manuscriptTreeDemo.getNodeByParam(
          "id",
          this.treeCreatName.parentId,
          null
        );
        this.manuscriptTreeDemo.reAsyncChildNodes(nodeParent2, "refresh");
        // this.manuscriptTreeDemo.cancelEditName('1111');
        return false;
      }
      if (treeNode.highlightName.replace(/\s/g, "").length === 0) {
        this.manuscriptTreeDemo.reAsyncChildNodes(
          this.manuscriptTreeDemo.getNodeByParam(
            "id",
            this.treeCreatName.parentId,
            null
          ),
          "refresh"
        );
        this.manuscriptTreeDemo.selectNode(
          this.manuscriptTreeDemo.getNodeByParam(
            "id",
            this.treeCreatName.parentId,
            null
          )
        );
        return false;
      }
      this.nameFilter(treeNode.docType == 1, treeNode.highlightName)
        .then(res => {
          if (this.isEditFlag) {
            this.isEditFlag = false;
            isCancel = false;
          } else {
            treeNode.highlightName = res;
            var data = {
              pageNo: this.pageNo,
              pageSize: this.pageSize,
              sourceName: "底稿管理",
              projectName: this.projectName,
              paperFlag: true,
              data: {
                docType: 1,
                parentId: treeNode.parentId,
                projectId: this.newProjId ? this.newProjId : this.pro_id,
                docId: "",
                docName: treeNode.highlightName
              }
            };
            this.$post("/doc/paper/insert", data)
              .then(res => {
                if (this.requestCode.SUCCESS == res.code) {
                  if (treeNode.parentId == 0) {
                    this.getTreeDataFn(this.newProjId);
                  } else {
                    var node = treeNode.getParentNode();
                    this.manuscriptTreeDemo.reAsyncChildNodes(node, "refresh");
                    this.manuscriptTreeDemo.selectNode(node);
                    this.getTreeListFn(node);
                  }
                  this.$message({
                    message: "添加成功",
                    type: "success"
                  });
                  isCancel = false;
                } else {
                  this.$message({
                    message: "添加失败",
                    type: "error"
                  });
                  isCancel = true;
                }
              })
              .catch(error => {
                console.log(error);
              });
          }
        })
        .catch(res => {
          treeNode.highlightName = res;
          this.manuscriptTreeDemo.editName(treeNode);
          $(`#${treeNode.tId}_input`).val(res);
        });
    },
    operationUpFn() {
      //树上移操作
      var nodes = this.manuscriptTreeDemo.getSelectedNodes();
      var preNode = nodes[0].getPreNode();
      if (!nodes || !preNode) {
        return;
      }
      var data = {
        token: this.token,
        userId: this.userId,
        sourceName: "底稿管理",
        projectName: this.projectName,
        paperFlag: true,
        data: {
          projectId: this.newProjId ? this.newProjId : this.pro_id,
          moveType: "0",
          docName: nodes[0].docName,
          toDocId: nodes[0].id,
          fromDocId: preNode.id,
          toOrderBy: nodes[0].orderBy,
          fromOrderBy: preNode.orderBy
        }
      };
      this.$post("/doc/paper/movePaperDoc", data)
        .then(res => {
          if (this.requestCode.SUCCESS == res.code) {
            if (preNode) {
              this.manuscriptTreeDemo.moveNode(preNode, nodes[0], "prev");
              if (nodes[0].parentId == 0) {
                var nodeParent = this.manuscriptTreeDemo.getNodeByParam(
                  "parentId",
                  0,
                  null
                );
                setTimeout(() => {
                  this.manuscriptTreeDemo.reAsyncChildNodes(
                    nodeParent,
                    "refresh"
                  );
                  this.manuscriptTreeDemo.selectNode(nodeParent);
                }, 0);
              } else {
                var nodeParent = this.manuscriptTreeDemo.getNodeByParam(
                  "id",
                  nodes[0].parentId,
                  null
                );
                setTimeout(() => {
                  this.manuscriptTreeDemo.reAsyncChildNodes(
                    nodeParent,
                    "refresh"
                  );
                  this.manuscriptTreeDemo.selectNode(nodeParent);
                }, 0);
              }

              this.$message({
                message: "上移成功",
                type: "success"
              });
            }
          } else {
            this.$message({
              message: res.msg,
              type: "error"
            });
          }
        })
        .catch(error => {
          console.log(error);
        });
    },
    operationDownFn() {
      //树下移操作
      var nodes = this.manuscriptTreeDemo.getSelectedNodes();
      var nextNode = nodes[0].getNextNode();
      if (!nodes || !nextNode) {
        return;
      }
      var data = {
        token: this.token,
        userId: this.userId,
        sourceName: "底稿管理",
        projectName: this.projectName,
        paperFlag: true,
        data: {
          projectId: this.newProjId ? this.newProjId : this.pro_id,
          moveType: "1",
          docName: nodes[0].docName,
          toDocId: nodes[0].id,
          fromDocId: nextNode.id,
          toOrderBy: nodes[0].orderBy,
          fromOrderBy: nextNode.orderBy
        }
      };
      this.$post("/doc/paper/movePaperDoc", data)
        .then(res => {
          if (this.requestCode.SUCCESS == res.code) {
            this.manuscriptTreeDemo.moveNode(nextNode, nodes[0], "next");
            if (nodes[0].parentId == 0) {
              var nodeParent = this.manuscriptTreeDemo.getNodeByParam(
                "parentId",
                0,
                null
              );
              setTimeout(() => {
                this.manuscriptTreeDemo.reAsyncChildNodes(
                  nodeParent,
                  "refresh"
                );
                this.manuscriptTreeDemo.selectNode(nodeParent);
              }, 0);
            } else {
              var nodeParent = this.manuscriptTreeDemo.getNodeByParam(
                "id",
                nodes[0].parentId,
                null
              );
              setTimeout(() => {
                this.manuscriptTreeDemo.reAsyncChildNodes(
                  nodeParent,
                  "refresh"
                );
                this.manuscriptTreeDemo.selectNode(nodeParent);
              }, 0);
            }
            this.$message({
              message: "下移成功",
              type: "success"
            });
          } else {
            this.$message({
              message: res.msg,
              type: "error"
            });
          }
        })
        .catch(error => {
          console.log(error);
        });
    },
    shrinkFn() {
      //底稿目录的推拉
      this.shrink_bac = !this.shrink_bac;
      this.searchFlag = !this.searchFlag;
      this.getPageHeight();
    },
    navClickFn(itemValue) {
      //点击导航
      this.rightMenuIsShow = false;
      this.orderFlag = "";
      this.clearTableSort();
      // 退出新建状态
      this.cancelAdd();
      this.listPageNo = 0;
      this.parentIdData = itemValue;
      this.workCatalogueParentId = itemValue.id;
      this.needDomElem.listScrollTop.scrollTop = 0;
      this.$post("/doc/paper/query", {
        pageNo: this.listPageNo - 1,
        pageSize: this.listPageSize,
        data: {
          parentId: itemValue.id,
          projectId: this.newProjId ? this.newProjId : this.pro_id
        }
      })
        .then(res => {
          if (this.requestCode.SUCCESS == res.code) {
            this.renameFlag = true;
            this.flieNameData = res.data.content;
            this.tableListTotal = res.data.totalElements;
            this.labelList(this.flieNameData);
            this.flieNameData.map(item => {
              item.isEdit = false;
              item.isAddDir = false;
              this.iconFilter(item);
            });
            var node = this.manuscriptTreeDemo.getNodeByParam(
              "id",
              itemValue.id,
              null
            );
            console.log("daohang", node, itemValue.id);
            this.manuscriptTreeDemo.selectNode(node);
            this.navArray.map((item, idx) => {
              if (item.docName == itemValue.docName) {
                this.navArray.splice(idx + 1, this.navArray.length - 1);
              }
            });
            // 回显选中的文件
            this.displaySelected();
            this.renameFlag = true;
          }
        })
        .catch(error => {
          console.log(error);
        });
    },
    citeTempFn() {
      //引用模版
      if (this.zNodes.length == 0) {
        this.$message({
          message: "左侧目录暂无目录，请添加后再进行操作",
          type: "warning"
        });
      } else {
        this.$router.push({
          path: "/tempIndex",
          query: {
            activeName: "first",
            name: "工作底稿",
            workCatalogueName: this.workCatalogueName,
            workCatalogueParentId: this.workCatalogueParentId
          }
        });
      }
    },
    citeCatalogDialogFn() {
      // 项目状态判断 已终止状态不可操作
      if (
        this.$store.state.projectMsg.projectMsg.endFlag &&
        this.$store.state.projectMsg.projectMsg.endFlag === 1
      ) {
        this.$store.commit("projectStatusTips");
        return;
      }
      //引用目录弹框
      if (!this.pro_id) {
        this.$message.warning("请先选择项目");
        return;
      }
      this.isShowIndexTemplate = true;
      return;
    },
    addDirStatusDiyDom(treeId, treeNode) {
      //添加文件数据目录灯
      var docTitle = "";
      if (treeNode.dirStatus === 0) {
        docTitle = "statusNo";
      } else if (treeNode.dirStatus === 1) {
        docTitle = "statusPending";
      } else if (treeNode.dirStatus === 2) {
        docTitle = "statusPass";
      } else if (treeNode.dirStatus === 3) {
        docTitle = "statusNoPass";
      }
      var aObj = $("#" + treeNode.tId + "_a");
      if ($("#diyBtn_" + treeNode.id).length > 0) return;
      var editStr = `<span class='${docTitle}'></span>`;
      aObj.prepend(editStr);
      var btn = $("#diyBtn_" + treeNode.id);
      if (btn)
        btn.bind("click", function() {
          alert("diy Button for " + treeNode.name);
        });
    },
    addDiyDom(treeId, treeNode) {
      //全局查看里每条数据的状态处理
      var docTitle = "";
      if (treeNode.docOrDirAuditStatus === 0) {
        docTitle = "待审批";
      } else if (treeNode.docOrDirAuditStatus === 1) {
        docTitle = "已通过";
      } else if (treeNode.docOrDirAuditStatus === 2) {
        docTitle = "已驳回";
      } else if (treeNode.docOrDirAuditStatus === 3) {
        docTitle = "未审批";
      }
      //+ "_a"
      var aObj = $("#" + treeNode.tId + "_a");
      if ($("#diyBtn_" + treeNode.id).length > 0) return;
      var editStr = `<a class='diyState'>${docTitle}</a>`;
      aObj.after(editStr);
      var btn = $("#diyBtn_" + treeNode.id);
      if (btn)
        btn.bind("click", function() {
          alert("diy Button for " + treeNode.name);
        });
      // docOrDirAuditStatus
    },
    examineFn() {
      //全局查看弹出框
      this.examineVisible = true;
      // 初始化查询条件
      this.checkCaAuditState.map(item => {
        item.checked = false;
      });
      this.checkAuditState.map(item => {
        item.checked = false;
      });
      this.checkFileAuditState.map(item => {
        item.checked = false;
      });
      this.checkFileType.map(item => {
        item.checked = false;
      });
      var data = {
        token: this.token,
        userId: this.userId,
        pageNo: this.pageNo,
        pageSize: this.pageSize,
        data: {
          projectId: this.newProjId || this.pro_id
        }
      };
      this.treeLoading = true;
      this.$post("/doc/paper/loadGolbalViewListByCondition", data)
        .then(res => {
          if (this.requestCode.SUCCESS == res.code) {
            this.examineZnodes = res.data.docPaperVos;
            this.examineZnodes.forEach(item => {
              if (item.docType === 1) {
                item.isParent = true;
                item.iconSkin = "examine";
                item.open = true;
              } else {
                item.iconSkin = "diy03";
              }
            });
            $.fn.zTree.init(
              $("#examineTree"),
              this.examineSetting,
              this.examineZnodes
            );
            this.examineTreeDemo = $.fn.zTree.getZTreeObj("examineTree");
            this.treeLoading = false;
          }
          this.treeLoading = false;
        })
        .catch(error => {
          this.treeLoading = false;
          console.log(error);
        });
    },
    examineTreeOnClickFn(e, treeId, treeNode) {
      //全局查看点击每个树
      this.examineTreeDemo.expandNode(treeNode);
    },
    examineTreeOnCheck(event, treeId, treeNode) {
      //全局查看选中每个树
      this.arrData = [];
      var nodes = this.examineTreeDemo.getNodes();
      this.examineTreeNode = JSON.parse(JSON.stringify(nodes));
      this.examineFiltecheckData(this.examineTreeNode);
      // if(treeNode.checked) {
      //     this.examineTreeNode.push(treeNode)
      // }
      // this.examineTreeNode.map((item,idx) => {
      //     if(item.id == treeNode.id && treeNode.checked == false) {
      //         this.examineTreeNode.splice(idx, 1)
      //     }
      // })
      var node = treeNode.getPath();
      if (this.chkDisabledInherit) {
        this.examineFilterDownData(this.examineTreeNode);
      } else {
        var nodeArray = [];
        nodeArray.push(node[0]);
        this.examineFilterDownData(nodeArray);
      }
    },
    examineCheckedFn(itemValue) {
      //全局查看筛选
      var status = this.examineCheckedFilterFn(itemValue);
      var data = {
        token: this.token,
        userId: this.userId,
        pageNo: this.pageNo,
        pageSize: this.pageSize,
        data: {
          projectId: this.newProjId ? this.newProjId : this.pro_id,
          dirAuditStatus: status.dirAuditStatus,
          docAuditStatus: status.docAuditStatus,
          dirDocStatus: status.dirDocStatus,
          gloableDocType: status.gloableDocType
        }
      };
      this.$post("/doc/paper/loadGolbalViewListByCondition", data)
        .then(res => {
          if (this.requestCode.SUCCESS == res.code) {
            this.examineZnodes = res.data.docPaperVos;
            var unCheckDirResult = res.data.unCheckDirResult;
            this.examineZnodes.forEach(item => {
              if (unCheckDirResult.length != 0) {
                unCheckDirResult.forEach(itemUn => {
                  if (item.docType === 1) {
                    item.isParent = true;
                    item.open = true;
                    item.iconSkin = "examine";
                  } else {
                    item.iconSkin = "diy03";
                  }
                  if (item.id === itemUn) {
                    item.chkDisabled = true;
                  }
                });
              } else {
                if (item.docType === 1) {
                  item.isParent = true;
                  item.open = true;
                  item.iconSkin = "examine";
                } else {
                  item.iconSkin = "diy03";
                }
              }
            });
            if (unCheckDirResult.length != 0) {
              this.chkDisabledInherit = false;
            } else {
              this.chkDisabledInherit = true;
            }
            $.fn.zTree.init(
              $("#examineTree"),
              this.examineSetting,
              this.examineZnodes
            );
          } else {
            $.fn.zTree.init($("#examineTree"), this.examineSetting, []);
          }
        })
        .catch(error => {
          console.log(error);
        });
    },
    examineCheckedFilterFn(itemValue) {
      //全局查看过滤
      if (itemValue.checked) {
        if (
          itemValue.dirAuditStatus === 0 ||
          itemValue.dirAuditStatus === 1 ||
          itemValue.dirAuditStatus === 2 ||
          itemValue.dirAuditStatus === 3
        ) {
          if (this.dirAuditStatusArray.length == 0) {
            this.dirAuditStatusArray.push(itemValue.dirAuditStatus);
          } else {
            this.dirAuditStatusArray.map(item => {
              if (
                this.dirAuditStatusArray.indexOf(itemValue.dirAuditStatus) == -1
              ) {
                this.dirAuditStatusArray.push(itemValue.dirAuditStatus);
              }
            });
          }
        } else if (
          itemValue.dirDocStatus === 1 ||
          itemValue.dirDocStatus === 2
        ) {
          if (this.dirDocStatusArray.length == 0) {
            this.dirDocStatusArray.push(itemValue.dirDocStatus);
          } else {
            this.dirDocStatusArray.map(item => {
              if (
                this.dirDocStatusArray.indexOf(itemValue.dirDocStatus) == -1
              ) {
                this.dirDocStatusArray.push(itemValue.dirDocStatus);
              }
            });
          }
        } else if (
          itemValue.docAuditStatus === 0 ||
          itemValue.docAuditStatus === 1 ||
          itemValue.docAuditStatus === 2 ||
          itemValue.docAuditStatus === 3
        ) {
          if (this.docAuditStatusArray.length == 0) {
            this.docAuditStatusArray.push(itemValue.docAuditStatus);
          } else {
            this.docAuditStatusArray.map(item => {
              if (
                this.docAuditStatusArray.indexOf(itemValue.docAuditStatus) == -1
              ) {
                this.docAuditStatusArray.push(itemValue.docAuditStatus);
              }
            });
          }
        } else if (
          itemValue.gloableDocType === 1 ||
          itemValue.gloableDocType === 2 ||
          itemValue.gloableDocType === 3
        ) {
          if (this.gloableDocTypeArray.length == 0) {
            this.gloableDocTypeArray.push(itemValue.gloableDocType);
          } else {
            this.gloableDocTypeArray.map(item => {
              if (
                this.gloableDocTypeArray.indexOf(itemValue.gloableDocType) == -1
              ) {
                this.gloableDocTypeArray.push(itemValue.gloableDocType);
              }
            });
          }
        }
      } else {
        if (
          itemValue.dirAuditStatus === 0 ||
          itemValue.dirAuditStatus === 1 ||
          itemValue.dirAuditStatus === 2 ||
          itemValue.dirAuditStatus === 3
        ) {
          this.dirAuditStatusArray.map((item, idx) => {
            if (item == itemValue.dirAuditStatus) {
              this.dirAuditStatusArray.splice(idx, 1);
            }
          });
        } else if (
          itemValue.dirDocStatus === 1 ||
          itemValue.dirDocStatus === 2
        ) {
          this.dirDocStatusArray.map((item, idx) => {
            if (item == itemValue.dirDocStatus) {
              this.dirDocStatusArray.splice(idx, 1);
            }
          });
        } else if (
          itemValue.docAuditStatus === 0 ||
          itemValue.docAuditStatus === 1 ||
          itemValue.docAuditStatus === 2 ||
          itemValue.docAuditStatus === 3
        ) {
          this.docAuditStatusArray.map((item, idx) => {
            if (item == itemValue.docAuditStatus) {
              this.docAuditStatusArray.splice(idx, 1);
            }
          });
        } else if (
          itemValue.gloableDocType === 1 ||
          itemValue.gloableDocType === 2 ||
          itemValue.gloableDocType === 3
        ) {
          this.gloableDocTypeArray.map((item, idx) => {
            if (item == itemValue.gloableDocType) {
              this.gloableDocTypeArray.splice(idx, 1);
            }
          });
        }
      }
      var status = {
        dirAuditStatus:
          this.dirAuditStatusArray != ""
            ? this.dirAuditStatusArray.join(",")
            : undefined,
        dirDocStatus:
          this.dirDocStatusArray != ""
            ? this.dirDocStatusArray.join(",")
            : undefined,
        docAuditStatus:
          this.docAuditStatusArray != ""
            ? this.docAuditStatusArray.join(",")
            : undefined,
        gloableDocType:
          this.gloableDocTypeArray != ""
            ? this.gloableDocTypeArray.join(",")
            : undefined
      };
      return status;
    },
    examineDownloadFn() {
      //全文查看下载
      var downLog = {
        userId: this.userId,
        token: this.token,
        data: {
          fileName: this.projectName
        }
      };
      this.$post("/doc/paper/downloadZipLogRecord", downLog)
        .then(res => {})
        .catch(error => {
          console.log(error);
        });
      if (this.examineTreeNode.length === 0) {
        this.$message.warning("请选中想要的文件再进行下载");
        return;
      }
      var loading = this.$loading({
        lock: true,
        text: "正在下载中",
        spinner: "el-icon-loading",
        background: "rgba(0, 0, 0, 0.7)"
      });
      var data = {
        random: new Date().getTime(),
        fileName: this.projectName,
        files: JSON.stringify(this.arrData)
      };
      // pc端下载
      if (this.$store.state.isPC) {
        this.$store.commit("export", {
          url: "/rfs/files/downloadZip",
          data: data
        });
      } else {
        this.below("/rfs/files/downloadZip", data);
      }
      this.intervalId = setInterval(() => {
        var animate = {
          random: new Date().getTime()
        };
        this.$post("/rfs/files/zipLongUrl", animate)
          .then(res => {
            if (res) {
              loading.close();
              clearInterval(this.intervalId);
              console.log(this.intervalId);
            }
          })
          .catch(error => {
            console.log(error);
          });
      }, 1000);
    },
    examineExportFn() {
      //全文查看导出
      var nodes = this.examineTreeDemo.transformToArray(this.examineTreeNode);
      var downloadFilesArray = [];
      var downloadDirsArray = [];
      nodes.map(item => {
        if (item.docType === 1) {
          if (downloadDirsArray.indexOf(item.id) == -1) {
            downloadDirsArray.push(item.id);
          }
        } else if (item.docType === 0) {
          if (downloadFilesArray.indexOf(item.id) == -1) {
            downloadFilesArray.push(item.id);
          }
        }
      });
      if (this.examineTreeNode.length != 0) {
        var params = {
          userId: this.userId,
          token: this.token,
          data: {
            fileName: this.projectName,
            files: downloadFilesArray.join(","),
            dirs: downloadDirsArray.join(","),
            projId: this.newProjId ? this.newProjId : this.pro_id
          }
        };
        console.log(12, params);
        // if (this.isPC) {
        this.$store.commit("export", {
          url: "/doc/paper/globalViewExport",
          data: params.data
        });
        // }
        // this.export("/doc/paper/globalViewExport", params);
      } else {
        this.$message({
          message: "请选中想要的文件再进行导出",
          type: "warning"
        });
      }
    },
    examineFiltecheckData(node) {
      if (!node || !node.length) {
        // return; 中断执行
        return;
      }
      node.some((item, idx) => {
        if (item.checked) {
          this.examineFiltecheckData(item.children);
        } else {
          node.splice(idx, 1);
          this.examineFiltecheckData(node);
        }
      });
    },
    examineFilterDownData(node, parentNode = null) {
      //全局查看过滤下载数据
      // var  arrData = [];
      if (!node || !node.length) {
        // return; 中断执行
        return;
      }
      for (var i in node) {
        var item = node[i];
        if (!item.parentId || !parentNode) {
          // tempName是我增加的值 用来存放父亲的你上级的docName值
          item.tempName = item.docName;
          this.arrData.push({
            dirName: "",
            name: encodeURIComponent(
              encodeURIComponent(encodeURIComponent(item.docName))
            ),
            path: item.rfsId ? item.rfsId : ""
          });
          if (item.children && item.children.length > 0) {
            this.examineFilterDownData(item.children, item);
          }
        } else {
          if (item.docType == 0) {
            item.tempName = parentNode.tempName + "/";
            this.arrData.push({
              dirName: encodeURIComponent(
                encodeURIComponent(encodeURIComponent(item.tempName))
              ),
              name: encodeURIComponent(
                encodeURIComponent(encodeURIComponent(item.docName))
              ),
              path: item.rfsId ? item.rfsId : ""
            });
            this.examineFilterDownData(item.children, item);
          } else if (item.docType == 1) {
            item.tempName = parentNode.tempName + "/" + item.docName;
            this.arrData.push({
              dirName: encodeURIComponent(
                encodeURIComponent(
                  encodeURIComponent(parentNode.tempName + "/")
                )
              ),
              name: encodeURIComponent(
                encodeURIComponent(encodeURIComponent(item.docName))
              ),
              path: item.rfsId ? item.rfsId : ""
            });
            if (item.children && item.children.length > 0) {
              this.examineFilterDownData(item.children, item);
            }
          }
        }
      }
      return this.arrData;
    },
    examineResetConFn() {
      //全局查看重置条件
      this.checkCaAuditState.map(item => {
        item.checked = false;
      });
      this.checkAuditState.map(item => {
        item.checked = false;
      });
      this.checkFileAuditState.map(item => {
        item.checked = false;
      });
      this.checkFileType.map(item => {
        item.checked = false;
      });
      this.dirAuditStatusArray.splice(0);
      this.dirDocStatusArray.splice(0);
      this.docAuditStatusArray.splice(0);
      this.gloableDocTypeArray.splice(0);
      var data = {
        token: this.token,
        userId: this.userId,
        pageNo: this.pageNo,
        pageSize: this.pageSize,
        data: {
          projectId: this.pro_id
        }
      };
      this.$post("/doc/paper/loadGolbalViewListByCondition", data)
        .then(res => {
          if (this.requestCode.SUCCESS == res.code) {
            this.examineZnodes = res.data.docPaperVos;
            this.examineZnodes.forEach(item => {
              if (item.docType === 1) {
                item.isParent = true;
                item.open = true;
                item.iconSkin = "examine";
              } else {
                item.iconSkin = "diy03";
              }
            });
            $.fn.zTree.init(
              $("#examineTree"),
              this.examineSetting,
              this.examineZnodes
            );
          }
        })
        .catch(error => {
          console.log(error);
        });
    },
    versionsDialogFn() {
      this.$select.updateStatus(2, this.pro_id, this.pro_id);
      this.updateSelData();
      //文件版本弹框函数
      this.addVersionData = this.selectFileNameArray[0];
      if (
        this.selectFileNameArray.length != 1 ||
        this.selectFileNameArray[0].docType != 0
      ) {
        this.$message.warning("请选中单个文件进行操作");
        return;
      }
      this.getDocVersionListFn(this.selectFileNameArray[0], 1);
    },
    getDocVersionListFn(itemValue, type) {
      console.log(itemValue.parentId, "itemValue.parentName");
      //请求文件版本数据
      //type: 1. 弹框 2. 刷新
      const data = {
        token: this.$store.state.loginObject.userToken,
        userId: this.$store.state.loginObject.userId,
        sourceName: "底稿管理",
        projectName: this.projectName,
        paperFlag: true,
        pageNo: 0,
        pageSize: 10,
        data: {
          docId: itemValue.docId,
          docName: itemValue.docName,
          parentId: itemValue.parentId
        }
      };
      this.$post("/doc/paper/getDocVersionList", data)
        .then(res => {
          if (this.requestCode.SUCCESS == res.code) {
            this.versionsData = res.data;
            if (type == 1) {
              this.versionVisible = true;
            }
          }
        })
        .catch(error => {
          console.log(error);
        });
    },
    versionLoad(itemValue) {
      //文件版本下载
      var proId = this.newProjId ? this.newProjId : this.pro_id;
      var jurisdiction = rightSysPermissionFn(proId, "paper_file_file_down");
      if (jurisdiction) {
        this.$store.commit("downloadRfs", [
          {
            name: itemValue.docName,
            id: itemValue.docRfs,
            docId: itemValue.docId
          }
        ]);
      } else {
        this.$message({
          message: "当前无权限",
          type: "warning"
        });
      }
    },
    restoreFn(itemValue) {
      // 项目状态判断 已终止状态不可操作
      if (
        this.$store.state.projectMsg.projectMsg.endFlag &&
        this.$store.state.projectMsg.projectMsg.endFlag === 1
      ) {
        this.$store.commit("projectStatusTips");
        return;
      }
      //文件版本还原
      if (this.addVersionData.lockState) {
        this.$message.warning("文件已锁定，不允许还原版本");
        return;
      }
      if (
        this.addVersionData.auditStatus == 1 ||
        this.addVersionData.auditStatus == 0 ||
        this.addVersionData.auditStatus == 6 ||
        this.addVersionData.auditStatus == 8
      ) {
        this.$message.warning("审批通过/审批中/修订审批中不允许还原版本");
        return;
      }
      this.$post("/doc/paper/reBackDocVersion", {
        pageNo: 0,
        pageSize: 10,
        sourceName: "底稿管理",
        projectName: this.projectName,
        paperFlag: true,
        data: {
          docId: itemValue.docId,
          fileId: this.addVersionData.id,
          id: itemValue.id,
          updateBy: itemValue.updateBy,
          docSize: itemValue.docSize
        }
      })
        .then(res => {
          if (this.requestCode.SUCCESS == res.code) {
            // this.getDocVersionListFn(this.selectFileNameArray[0], 2);
            this.versionEchoingFn(
              this.selectFileNameArray[0].parentId,
              this.selectFileNameArray[0].id
            );
            this.versionVisible = false;
            this.clearSelection();
            this.$message.success("还原版本成功");
          } else if (this.requestCode.DOC_FIlE_VERSION_NEW == res.code) {
            this.$message.success("该版本是文件最新版本");
          } else {
            this.$message.error(res.msg);
          }
        })
        .catch(error => {
          console.log(error);
        });
    },
    affirmVersionUpload(isBtn = false) {
      // 判断项目是否是已终止状态
      if (
        this.$store.state.projectMsg.projectMsg.endFlag &&
        this.$store.state.projectMsg.projectMsg.endFlag === 1
      ) {
        this.$store.commit("projectStatusTips");
        return;
      }
      if (!this.$utils.checkSystemPermission("paper_file_file_upload")) {
        this.$message.warning("您无对应的项目角色权限/后台权限");
        return;
      }
      //文件版本上传新版本
      if (isBtn) {
        this.addVersionData = this.selectFileNameArray[0];
      } else {
        this.addVersionData = this.rightMenuItemData;
        this.rightMenuIsShow = false;
      }

      if (
        (this.selectFileNameArray.length != 1 && isBtn) ||
        this.addVersionData.docType != 0
      ) {
        this.$message.warning("请选中单个文件进行操作");
        return;
      }
      if (
        this.addVersionData.lockState ||
        this.addVersionData.auditStatus == 1 ||
        this.addVersionData.auditStatus == 0 ||
        this.addVersionData.auditStatus == 6 ||
        this.addVersionData.auditStatus == 8
      ) {
        this.$message.warning("文件已锁定，不允许上传新版本");
        return;
      }
      let fileObj = isBtn
        ? this.selectFileNameArray[0]
        : this.rightMenuItemData;

      let data = {
        docSource: 1,
        docId: this.addVersionData.docId,
        id: this.addVersionData.id,
        projId: this.pro_id,
        parentId: fileObj.parentId,
        auditProjectId: null,
        docName: fileObj.docName,
        type: fileObj.type
      };
      // PC端上传新版本
      if (this.isPC) {
        let params = {
          userId: this.userId,
          token: this.token,
          projectId: this.pro_id,
          loginType: "PC",
          sourceName: "底稿管理", // 页面名称
          projectName: this.projectName, // 项目名
          paperFlag: true, // 是否为底稿
          data
        };
        window.ChromeMain.CS_Main_UploadNewVersionDoc(JSON.stringify(params));
        return;
      }
      let accept = "";
      let type = fileObj.type;
      if (type == "doc" || type == "docx") {
        accept = "doc,docx";
      } else if (type == "xls" || type == "xlsx") {
        accept = "xls,xlsx";
      } else if (type == "rtf") {
        accept = "doc,docx,rtf";
      } else {
        accept = type;
      }

      this.$refs["RdUploader"].openSelect(
        {
          multiple: false,
          accept: accept
        },
        data,
        true
      );
      this.closeVersion();
    },
    closeVersion() {
      this.versionVisible = false;
      this.versionEchoingFn(this.workCatalogueParentId);
      this.clearSelection();
    },
    uploadingFn(flag) {
      //上传
      var nodes = this.manuscriptTreeDemo.getSelectedNodes();
      var node = nodes[0];
      // this.addDoc = true;
      // this.uploadDocAddIsShow = true;
      this.uploadParamData = {
        docSource: 1,
        projId: this.newProjId ? this.newProjId : this.pro_id,
        parentId: node.id,
        auditProjectId: null
      };
      this.parentIdUpload = node.id;

      let options = {
        multiple: true,
        accept: ""
      };

      flag === "file"
        ? this.$refs["RdUploader"].openSelect(options, this.uploadParamData)
        : this.$refs["RdUploader"].uploadFolder(this.uploadParamData, 1); // 项目文档0， 底稿1
    },
    docUploadFn(uploadData) {
      let data = {
        sourceName: "底稿管理",
        projectName: this.projectName,
        paperFlag: true
      };
      let fileData = uploadData.fileData;
      const projectId = this.newProjId || this.pro_id;
      // 文件夹上传标识
      const isFolder = uploadData.isFolder;
      if (isFolder) {
        let fileArr = fileData.webkitRelativePath.split("/");

        const filePath = fileArr.slice(0, fileArr.length - 1).join("/");
        let uploadDir =
          uploadData.fileData.uploadDir == undefined
            ? ""
            : uploadData.fileData.uploadDir;
        data.data = {
          docType: 0,
          docId: uploadData.docId,
          docName: fileData.name, //本地准备上传的文件名称
          rfsId: fileData.rfsId,
          parentId: fileData.data.parentId, //父级id
          auditProjectId: fileData.data.auditProjectId, //阶段id
          docSource: 1, //项目文档为0，底稿为1
          updateBy: this.userId,
          filePath,
          projectId: fileData.data.projId,
          uploadDir: uploadDir
        };
      } else {
        data.data = {
          projectId,
          parentId: this.parentIdUpload,
          docType: 0,
          docId: uploadData.docId,
          docName: uploadData.docName,
          docSize: fileData.size,
          rfsId: fileData.rfsId
        };
      }

      this.$post(
        isFolder ? "/doc/paper/insertFileForFile" : "/doc/paper/insertPaperDoc",
        data
      )
        .then(res => {
          if (this.requestCode.SUCCESS == res.code) {
            // this.$refs.uploadComplete.uploadComplete();

            // 上传成功，刷新列表--不用了，手动插入文件信息
            // this.queryPaper(projectId, this.parentIdUpload);

            this.insertUploadedFilePaper(res.data);

            this.$refs["RdUploader"].handleUploadSuccess(uploadData.tId);
          } else {
            this.$message.error(res.msg || "上传失败");
          }
        })
        .catch(error => {
          console.log(error);
        });
    },
    // 文件上传成功，在列表顶部插入已上传的文件
    insertUploadedFilePaper(data) {
      this.isPC && (data = JSON.parse(data));
      // alert(data)

      let fileProjectId = "";
      let fileParentId = "";
      let projectId = this.pro_id;
      let curDirId = this.workCatalogueParentId;

      if (data.uploadDirYes) {
        // 判断是否有文件夹信息
        if (!data.parentInfo) return;
        // 判断是否在当前页面
        fileProjectId = data.parentInfo.projectId;
        fileParentId = data.parentInfo.parentId;
        data.parentInfo.fileSum = 1;
      } else {
        fileProjectId = data.projectId;
        fileParentId = data.parentId;
      }
      // 判断是否在当前目录下，如果再则更新列表，否则不更新
      if (projectId !== fileProjectId || curDirId !== fileParentId) return;

      let fileData = data.uploadDirYes ? data.parentInfo : data;
      fileData.isShowIcon = true;

      // 处理文件图标
      this.iconFilter(fileData);
      this.flieNameData.unshift(fileData);
    },
    docUploadAllsucess() {
      this.sendValueToParentFn();
      var nodes = this.manuscriptTreeDemo.getSelectedNodes();
      var node = nodes[0];
      this.getTreeListFn(node);
      this.$message({
        message: "上传成功",
        type: "success"
      });
    },
    versionUploadFn(fileData) {
      //上传新版本
      this.$post("/doc/paper/addDocVersion", {
        sourceName: "底稿管理",
        projectName: this.projectName,
        paperFlag: true,
        data: {
          docId: fileData.fileData.data.docId,
          id: fileData.fileData.data.id,
          docName: fileData.fileData.name,
          projId: fileData.fileData.data.projId,
          docSize: fileData.fileData.size,
          updateBy: this.userId,
          docRfs: fileData.fileData.rfsId
        }
      })
        .then(res => {
          if (this.requestCode.SUCCESS != res.code) {
            this.$message.error(res.msg);
            return;
          }
          this.$refs["RdUploader"].handleUploadSuccess(fileData.tId);
          // this.versionEchoingFn(fileData.fileData.data.parentId);
          this.clearSelection();
        })
        .catch(error => {
          console.log(error);
        });
    },
    sendValueToParentFn() {
      //上传的关闭弹框
      this.addDoc = false;
      this.uploadDocAddIsShow = false;
    },
    downloadFn() {
      this.$select.updateStatus(2, this.pro_id, this.pro_id);
      this.updateSelData();
      let downData = [...this.selectManaullyFile, ...this.selectDir];
      //文件下载
      if (downData.length == 0) {
        this.$message.warning("请选择至少一条数据");
        return;
      }
      let downloadArr = [];
      // PC端下载
      if (this.isPC) {
        //   pc下载没有打包下载，还是走download
        downloadArr = downData.map(item => {
          return {
            docId: item.docId,
            docType: item.docType,
            id: item.id,
            docName: item.docName,
            source: 1, // 文件源： 1底稿 0项目文档 2客户文档
            parentId: item.parentId,
            projectId: item.projectId,
            parentName: item.parentName,
            sourceName: "底稿管理",
            projectName: this.projectName,
            paperFlag: true
          };
        });
        this.$store.commit("download", downloadArr);
        this.clearSelection();
        return;
      } else {
        downloadArr = downData.map(item => {
          return {
            id: item.docId,
            name: item.docName
          };
        });
      }
      setTimeout(() => {
        // console.log(downloadArr)
        this.journal(); // pc不需要记录
        // 单文件下载
        if (downData.length == 1 && downData[0].docType != 1) {
          this.$store.commit("download", downloadArr);
          return;
        }
        // 批量下载
        let files = [];
        files = downData.map(item => {
          return {
            parentId: item.parentId,
            rfsId: item.rfsId,
            fileName: item.docName,
            id: item.id,
            docType: item.docType
          };
        });
        this.$store.commit("export", {
          url: `/rfs/files/downloadDocsZip`,
          data: {
            projectName: this.projectName,
            random: new Date().getTime(),
            source: 1, //下载位置0 项目文档、 1 底稿
            files
          }
        });
      });
      this.clearSelection();
    },
    journal() {
      this.$post("/doc/paper/log/addDownload", {
        sourceName: "底稿管理",
        projectName: this.projectName,
        paperFlag: true,
        data: {
          projectId: this.newProjId || this.pro_id,
          docPapers: this.selectFileNameArray.map(v => {
            return { docName: v.docName, id: v.id };
          })
        }
      })
        .then(res => {})
        .catch(err => {});
    },

    searchFn() {
      //全文检索
      this.orderFlag = "";
      if (this.search_input != "") {
        this.$router.push({
          path: "/fullsearch",
          query: {
            searchName: this.search_input,
            projectId: this.newProjId != "" ? this.newProjId : this.pro_id
          }
        });
      } else {
        return;
      }
    },
    // 更新数据
    updateSelData() {
      let data = this.$select.getSelectedData(2, this.pro_id);
      this.selectFileNameArray = data.file;
      this.selectDir = this.viewType ? data.dir : [];
      this.selectManaullyFile = data.manaullyFile;
      // console.log(123, this.selectDir);
    },
    //table数据改变
    selectChangeFn(itemValue) {
      //   this.updateSelData();
      //   return
      // 修改实现方式
      // 首先判断勾选与取消
      // 勾选：获取ztree对象
      //   setTimeout(() => {
      //     this.manuscriptTreeDemo.checkAllNodes(false);
      //     this.rightMenuIsShow = false;
      //     itemValue.forEach(item => {
      //       if (item.docType != 1) return
      //       this.manuscriptTreeDemo.checkNode(this.manuscriptTreeDemo.getNodesByParam('id', item.id)[ 0 ], '', true)
      //     })
      //   }, 500)
    },
    rowClass({ row, rowIndex }) {
      if (!this.selectFileNameArray) return;
      if (this.selectFileNameArray.includes(row)) {
        return {
          "background-color": "rgba(244,246,249,1)"
        };
      }
    },
    dblclickFn(itemValue, event, column) {
      if (column.type === "selection") return;
      //双击每条数据
      this.orderFlag = "";
      this.clearTableSort();
      this.addDirState && this.cancelAdd();
      this.shrink_bac = false;
      this.getPageHeight();
      this.searchFlag = true;
      this.rightMenuIsShow = false;
      this.clickType = 2;
      this.dblclickData = itemValue;
      this.parentIdData = itemValue;
      // console.log(itemValue);
      if (itemValue.docType == 0) {
        // 判断项目是否是已终止状态 判断用于 pc端 不可在线编辑   pc 还要判断类型（文件夹双击可以打开  文件双击不可以编辑）
        if (
          this.isPC &&
          this.$store.state.projectMsg.projectMsg.endFlag &&
          this.$store.state.projectMsg.projectMsg.endFlag === 1
        ) {
          this.$store.commit("projectStatusTips");
          return;
        }
        if (
          !rightSysPermissionFn(
            this.newProjId || this.pro_id,
            "paper_file_file_preview"
          )
        ) {
          this.$message.warning("无对应文件预览权限，请在角色权限中进行配置");
          return;
        }
        // PC端预览格式限制
        if (
          this.isPC &&
          !this.$globalConfig.docTypeLimit.pcTypeCheck(itemValue.type)
        ) {
          this.$message.warning("该文件类型暂不支持在线编辑，请下载查看！");
          return;
        }
        var previewData = {
          projectid: this.newProjId || this.pro_id,
          rfsId: itemValue.rfsId,
          docId: itemValue.docId,
          photoType: itemValue.type,
          sourceType: "manuscriptmanage",
          docName: itemValue.docName,
          id: itemValue.id,
          sourceName: "底稿管理"
        };
        itemValue.source = "1";
        if (this.isPC) {
          itemValue.sourceName = "底稿管理";
          itemValue.projectName = this.projectName;
          itemValue.paperFlag = true;
        }
        this.isPC
          ? window.ChromeMain.CS_Main_OpenFile(JSON.stringify(itemValue)) // PC端双击在线编辑
          : this.$store.commit("previewAllFn", previewData); // web端预览
      } else if (itemValue.docType == 1) {
        this.listPageNo = 1;
        this.workCatalogueParentId = itemValue.id;
        this.needDomElem.listScrollTop.scrollTop = 0;
        var node = this.manuscriptTreeDemo.getNodeByParam(
          "id",
          itemValue.id,
          null
        );
        node.children = [];
        this.manuscriptTreeDemo.selectNode(node);
        this.manuscriptTreeDemo.reAsyncChildNodes(node, "refresh");
        this.getTreeListFn(node);
        this.navArray.map((item, idx) => {
          if (item.parentId == itemValue.parentId) {
            this.navArray.splice(idx, 1, itemValue);
          } else {
            this.navArray.push(itemValue);
            this.navArray = Array.from(new Set(this.navArray));
          }
        });
      }
    },
    filter(node) {
      return node.docName == this.dblclickData.docName;
    },
    Trim(str) {
      //去前后空格
      return str.replace(/(^\s*)|(\s*$)/g, "");
    },
    rightEvent(row, col, itemValue) {
      console.log(itemValue, row);
      //右键事件
      if (!row || this.addDirState) {
        return;
      }
      let rightInerText = ""; //当前右键的文本内容
      // let rightIsLinkDelete = ''; //当前右键的文件是不是不可右键的

      rightInerText = row.highlightName;
      // rightIsLinkDelete = row.isLinkDelete;

      if (this.flieNameData.length === 0) {
        // this.rightMenuItemData.empty = 'kong'
        // this.rightMenuItemData = {};
        // this.$set(this.rightMenuItemData,"empty","kong")
        // this.rightMenuItemData = this.$set({},"empty","kong")
        this.rightmenuFn();
      } else {
        let rightMenuItemData = this.flieNameData.filter(
          item => this.Trim(item.docName) === rightInerText
        );
        this.$select.handleFileSelect(2, this.pro_id, this.pro_id, [row]);
        //   let rightMenuItemData = this.flieNameData.filter(item => item.docName === rightInerText);
        // this.rightMenuItemData = rightMenuItemData.length != 0 ? rightMenuItemData[0] : {};
        this.rightMenuItemData = row;
        // if (this.rightMenuItemData) {
        //   return;
        // }
        // var flagArray = this.selectFileNameArray.filter(
        //   item => item.id === this.rightMenuItemData.id
        // );
        // if (flagArray.length == 0) {
        //   // TODO: 右键时候会清除其他已选择项
        //   // this.$refs.multipleTable.clearSelection(this.selectFileNameArray, true);
        //   rightMenuItemData.length != 0 &&
        //     this.$refs.multipleTable.toggleRowSelection(
        //       this.rightMenuItemData,
        //       true
        //     );
        // }
        this.rightmenuFn();
        rightMenuItemData.length != 0 &&
          this.$refs.multipleTable.toggleRowSelection(
            this.rightMenuItemData,
            true
          );
      }

      // if(this.flieNameData.length === 0) {
      //     console.log('这么',this.rightMenuItemData)
      //     // this.rightMenuItemData.empty = 'kong'
      //     // this.rightMenuItemData = {};
      //     // this.$set(this.rightMenuItemData,"empty","kong")
      //     // this.rightMenuItemData = this.$set({},"empty","kong")
      //     this.rightmenuFn()
      // } else {
      //     this.flieNameData.map((item, idx) => {
      //         if(item.docName === rightInerText) {
      //             this.rightMenuItemData = item;
      //             this.rightmenuFn()
      //         } else if(item.isLinkDelete === rightIsLinkDelete){
      //             return;
      //         }else {
      //             this.rightMenuItemData.empty = 'kong'
      //             this.rightmenuFn()
      //         }
      //     })
      // }
    },
    rightmenuFn() {
      var e = event;
      e.preventDefault();
      e.stopPropagation();
      $("#rightM").css({
        display: "none"
      });
      this.rightMenuIsShow = true;
      setTimeout(() => {
        $("#rightM").css({
          top: e.clientY + 10,
          left: e.clientX + 10,
          display: "block"
        });
        if (e.clientY + 10 >= $(window).height() - $("#rightM").height()) {
          $("#rightM").css({
            top: $(window).height() - $("#rightM").height() - 20
          });
        } else if (e.clientX + 10 >= $(window).width() - $("#rightM").width()) {
          $("#rightM").css({
            left: $(window).width() - $("#rightM").width() - 20
          });
        }
      }, 10);
    },
    rightMenuClick(data) {
      switch (data) {
        case "preview":
          this.rightMenuPreview();
          break;
        case "download":
          this.rightMenuDownload();
          break;
        case "upload":
          this.affirmVersionUpload();
          break;
        case "delete":
          this.rightMenuDelete();
          break;
        case "rename":
          this.rightMenuRename();
          break;
        case "copy":
          this.rightMenuCopy();
          break;
        case "paste":
          this.rightMenuPaste();
          break;
        case "cut":
          this.rightMenuCut();
          break;
        case "lock":
          this.rightMenuLock();
          break;
        case "unlock":
          this.rightMenuUnLock();
          break;
        case "attributes":
          this.rightMenuDocpro();
          break;
      }
    },
    rightMenuPreview() {
      // console.log(this.rightMenuItemData)
      //右键预览
      var proId = this.newProjId ? this.newProjId : this.pro_id;
      var jurisdiction = rightSysPermissionFn(proId, "paper_file_file_preview");
      this.rightMenuIsShow = false;
      if (jurisdiction) {
        let p = {
          projectId: proId,
          docId: this.rightMenuItemData.docId,
          photoType: this.rightMenuItemData.type,
          rfsId: this.rightMenuItemData.rfsId,
          sourceType: "manuscriptmanage",
          docName: this.rightMenuItemData.docName,
          id: this.rightMenuItemData.id,
          sourceName: "底稿管理"
        };
        this.$store.commit("previewAllFn", p);
      } else {
        this.$message({
          message: "当前无权限",
          type: "warning"
        });
      }
    },
    rightMenuDownload() {
      //右键下载
      if (
        !rightSysPermissionFn(
          this.newProjId || this.pro_id,
          "paper_file_file_down"
        )
      ) {
        this.$message.warning("当前无权限");
        return;
      }

      let data = this.$select.getSelectedData(2, this.newProjId || this.pro_id);
      this.selectFileNameArray = data.file;
      this.rightMenuIsShow = false;
      this.selectFileNameArray.length != 0 && this.downloadFn();

      // if(this.rightMenuItemData.lockState != -1 ) {
      //         this.$message({
      //             message: '所选数据包含锁定文件不能上传新版本',
      //             type: "warning"
      //         });
      // } else {
      //     if(this.selectFileNameArray.length != 0) {
      //         this.selectFileNameArray.map((item,idx) => {
      //             if(item.docType != 1) {
      //                 this.$store.commit('download', [{
      //                     id: item.docId,
      //                     name: item.docName
      //                 }])
      //             }
      //         })
      //     } else {
      //         this.$message({
      //             type: 'warning',
      //             message: '请选中数据进行下载或批量下载'
      //         });
      //     }
      // }
    },
    rightMenuDelete(isDelBtn = false) {
      this.$select.updateStatus(2, this.pro_id, this.pro_id);
      this.updateSelData();
      let delData = isDelBtn
        ? [...this.selectManaullyFile, ...this.selectDir]
        : [this.rightMenuItemData];
      this.rightMenuIsShow = false;
      //右键删除
      console.log(delData);
      if (delData.length == 0) {
        this.$message.warning("请选择至少一条数据");
        return;
      }
      var jurisdiction;
      var proId = this.newProjId || this.pro_id;
      if (isDelBtn) {
        // 删除按钮和右键删除走不同的判断逻辑
        let delFlag = false;
        let lockFlag = false;
        delData.some(item => {
          if (item.docType == 1) {
            delFlag = item.quoteId
              ? true
              : rightSysPermissionFn(proId, "paper_del_atalog");
          } else {
            delFlag = rightSysPermissionFn(proId, "paper_file_file_del");
          }
          // 引用的目录 不判断底稿删除权限
          if (!delFlag) {
            this.$message.warning("您无对应的项目角色权限/后台权限");
            return true;
          }
          if (item.lockState) {
            this.$message.warning(
              `锁定${item.docType == 1 ? "目录" : "文件"}不能删除`
            );
            lockFlag = true;
            return true;
          }
        });
        if (!delFlag || lockFlag) {
          return;
        }
      } else {
        if (this.rightMenuItemData.docType == 1) {
          jurisdiction = this.rightMenuItemData.quoteId
            ? true
            : rightSysPermissionFn(proId, "paper_del_atalog");
        } else if (this.rightMenuItemData.docType == 0) {
          jurisdiction = rightSysPermissionFn(proId, "paper_file_file_del");
        }
        // if(jurisdiction || this.rightMenuItemData.quoteId !== null) { // 有删除权限||自己创建的  可以删除
        if (!jurisdiction) {
          // 有删除权限||自己创建的  可以删除
          this.$message.warning("当前无权限");
          return;
        }
        if (this.rightMenuItemData.lockState) {
          this.$message.warning(
            `锁定${
              this.rightMenuItemData.docType == 1 ? "目录" : "文件"
            }不能删除`
          );
          return;
        }
      }
      if (!this.rightMenuItemData || !this.flieNameData.length) {
        this.$message({
          type: "warning",
          message: "请选择数据进行删除"
        });
        return;
      }
      this.$confirm("此操作将永久删除该文件, 是否继续?", "提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning"
      })
        .then(() => {
          this.loading = this.$loading({
            lock: true,
            text: "数据过多正在删除中",
            spinner: "el-icon-loading",
            background: "rgba(0, 0, 0, 0.7)"
          });
          let quoteIdList = [];
          let dirIds = [];
          let docPaperIds = [];
          let docIds = [];
          let quoteId = "";
          delData.forEach(item => {
            docIds.push(item.id);
            !quoteId && item.quoteId && (quoteId = item.quoteId);
            item.quoteId
              ? quoteIdList.push(item.id)
              : item.docType === 1
              ? dirIds.push(item.id)
              : docPaperIds.push(item.id);
          });
          var data = {
            token: this.token,
            userId: this.userId,
            sourceName: "底稿管理",
            projectName: this.projectName,
            paperFlag: true,
            data: {
              docIds: docIds.join(","),
              quoteId: quoteId,
              parentId: delData[0].parentId,
              quoteIdList: quoteIdList, // 引用的目录
              dirIds: dirIds, // 自己创建的目录
              docPaperIds: docPaperIds // 文件
            }
          };
          this.$post("/doc/paper/deletePaperDoc", data)
            .then(res => {
              this.loading.close();
              if (this.requestCode.SUCCESS == res.code) {
                this.delEchoingFn(delData[0], 3);
                this.$select.handleCancel(
                  2,
                  this.pro_id,
                  this.pro_id,
                  isDelBtn ? delData : [this.rightMenuItemData]
                );
                this.rightMenuIsShow = false;
              } else {
                this.$message({
                  message: res.msg,
                  type: "error"
                });
              }
              // if(res.code === -5006 ||  res.code == -2006){
              //     this.$message({
              //         message: '您无对应的项目角色权限/后台权限',
              //         type: "warning"
              //     });
              // } else {
              //     this.$message({
              //         message: '删除失败',
              //         type: "error"
              //     });
              // }
            })
            .catch(error => {
              this.loading.close();
              console.log(error);
            });
        })
        .catch(() => {
          // this.$message({
          //     type: 'info',
          //     message: '已取消删除'
          // });
        });
    },
    // 判断是否可以重命名
    async isReName(id) {
      let resMsg = false;
      await this.$post("/doc/project/docPaperStatus", {
        data: {
          ids: [id]
        }
      }).then(res => {
        if (res.code == 0) {
          resMsg = true;
        } else {
          this.$message({
            message: res.msg,
            type: "warning"
          });
          resMsg = false;
        }
      });
      return resMsg;
    },
    async rightMenuRename() {
      //右键重命名
      // this.renamePowerTest(this.rightMenuItemData, this.rightMenuItemData.docName ,2).then(res => {
      // if(!res){
      //     this.$message({
      //         message: '您无对应的项目角色权限/后台权限',
      //         type: "warning"
      //     });
      //     return;
      // } else {
      let flag = true;
      await this.isReName(this.rightMenuItemData.id).then(res => {
        flag = res;
      });
      if (!flag) {
        return;
      }
      var proId = this.newProjId ? this.newProjId : this.pro_id;
      if (this.rightMenuItemData.docType == 1) {
        var jurisdiction = rightSysPermissionFn(proId, "paper_rename_atalog");
      } else if (this.rightMenuItemData.docType == 0) {
        var jurisdiction = rightSysPermissionFn(
          proId,
          "paper_file_file_rename"
        );
      }
      if (jurisdiction || this.rightMenuItemData.quoteId !== null) {
        if (this.rightMenuItemData.lockState) {
          this.$message({
            message: "所选数据包含锁定文件不能重命名",
            type: "warning"
          });
        } else {
          var reg = /(\.)/g;
          if (this.renameFlag) {
            this.renameFlag = false;
            this.renameData = this.rightMenuItemData;
            this.rightMenuIsShow = false;
            this.flieNameData.map((item, idx) => {
              if (item.id == this.renameData.id) {
                item.isEdit = true;

                if (item.docType == 1) {
                  this.renameSuffix = "";
                  this.editName_input = item.docName;
                } else if (item.docType == 0) {
                  // var matches = reg.exec(item.docName).index;
                  var matches = item.docName.lastIndexOf(".");
                  this.renameSuffix = item.docName.substring(
                    matches,
                    item.docName.length
                  );
                  this.editName_input = item.docName.substring(0, matches);
                }
                this.flieNameData.splice(idx, 1, item);
              }
            });
          } else {
            this.$message({
              message: "只能重命名一个",
              type: "warning"
            });
          }
        }
      } else {
        this.$message({
          message: "当前无权限",
          type: "warning"
        });
      }
      // }
      // })
    },
    /**
     * 目录名称过滤方法
     * @param {isFilter} 是否进行过滤
     * @param {name} 需要过滤的字符串
     * @param {isNoShowTit} 是否不提示
     * @return 过滤后的name
     */
    nameFilter(isFilter, name, isNoShowTit) {
      return new Promise((resolve, reject) => {
        // 文件不处理
        if (!isFilter) resolve(name);
        const reg = /[\|\/\'\*\:\"\L\<\>\?\\]/g;
        if (reg.test(name) && isFilter) {
          !isNoShowTit && this.$message.warning(`不能包含特殊字符*<>？：''/`);
          name = name.replace(reg, "");
          reject(name);
        }
        resolve(name);
      });
    },
    // 右键重命名后
    editNameFn() {
      if (this.renameSuffix != "") {
        var beforName = this.renameData.docName.replace(
          this.renameData.docName.substr(
            this.renameData.docName.lastIndexOf(".")
          ),
          ""
        );
      } else {
        var beforName = this.renameData.docName;
      }

      if (this.editName_input === beforName) {
        this.flieNameData.map((item, idx) => {
          if (item.id == this.renameData.id) {
            item.isEdit = false;
            item.isAddDir = false;
            this.editName_input = "";
            this.flieNameData.splice(idx, 1, item);
            this.renameFlag = true;
          }
        });
      } else if (this.editName_input == "") {
        this.flieNameData.map((item, idx) => {
          if (item.id == this.renameData.id) {
            item.isAddDir = false;
            this.editName_input = "";
            this.flieNameData.splice(idx, 1, item);
            this.renameFlag = true;
          }
        });
        this.$message({
          message: "名字不能为空",
          type: "warning"
        });
      } else {
        this.renameEchoingFn(this.renameData, this.editName_input, 2);
      }
    },
    rightMenuCopy() {
      //右键复制
      var proId = this.newProjId ? this.newProjId : this.pro_id;
      var jurisdiction = rightSysPermissionFn(proId, "paper_file_file_copy");
      if (jurisdiction) {
        this.copyType = 1;
        var idArray = [];
        var id = "";
        if (this.selectFileNameArray.length != 0) {
          this.selectFileNameArray.map((item, idx) => {
            idArray.push(item.id);
          });
        } else {
          id = this.rightMenuItemData.id;
        }
        this.copyStoreData.ids =
          this.selectFileNameArray.length != 0 ? idArray.join(",") : id;
        this.copyStoreData.oldProjId = this.oldProjId;
        this.copyStoreData.newProjId = this.newProjId;
        this.copyStoreData.copyData = this.rightMenuItemData;
        this.copyStoreData.copyType = this.copyType;
        this.$store.commit("manuscriptCopyFn", this.copyStoreData);
        setTimeout(() => {
          this.$message({
            message: "复制成功",
            type: "success"
          });
          this.rightMenuIsShow = false;
        }, 100);
      } else {
        this.$message({
          message: "当前无权限",
          type: "warning"
        });
      }
    },
    rightMenuCut() {
      //右键剪切
      var proId = this.newProjId ? this.newProjId : this.pro_id;
      var jurisdiction = rightSysPermissionFn(proId, "paper_file_file_shear");
      if (jurisdiction) {
        this.selectFileNameArray.map(item => {
          if (item.lockState) {
            this.$message({
              message: "所选数据包含锁定文件不能剪切",
              type: "warning"
            });
          } else {
            this.copyType = 2;
            var idArray = [];
            var id = "";
            if (this.selectFileNameArray.length != 0) {
              this.selectFileNameArray.map((item, idx) => {
                if (item.docType == 1) {
                  this.$message({
                    message: "当前选中有目录数据,暂不支持目录的剪切操作",
                    type: "warning"
                  });
                } else {
                  if (this.selectFileNameArray.length != 0) {
                    this.selectFileNameArray.map((item, idx) => {
                      idArray.push(item.id);
                      idArray = Array.from(new Set(idArray));
                      this.flieNameData.map((items, idx) => {
                        if (
                          items.id === item.id &&
                          items.docName == item.docName
                        ) {
                          this.flieNameData.splice(idx, 1);
                        }
                      });
                    });
                  } else {
                    id = this.rightMenuItemData.id;
                    this.flieNameData.map((item, idx) => {
                      if (
                        item.id === id &&
                        item.docName == this.rightMenuItemData.docName
                      ) {
                        this.flieNameData.splice(idx, 1);
                      }
                    });
                  }
                  this.copyStoreData.ids =
                    this.selectFileNameArray.length != 0
                      ? idArray.join(",")
                      : id;
                  this.copyStoreData.oldProjId = this.oldProjId;
                  this.copyStoreData.newProjId = this.newProjId;
                  this.copyStoreData.copyData = this.rightMenuItemData;
                  this.copyStoreData.copyType = this.copyType;
                  this.$store.commit("manuscriptCopyFn", this.copyStoreData);
                  setTimeout(() => {
                    this.$message({
                      message: "剪切成功",
                      type: "success"
                    });
                    this.rightMenuIsShow = false;
                  }, 100);
                }
              });
            } else {
              id = this.rightMenuItemData.id;
              this.flieNameData.map((item, idx) => {
                if (
                  item.id === id &&
                  item.docName == this.rightMenuItemData.docName
                ) {
                  this.flieNameData.splice(idx, 1);
                }
              });
              this.copyStoreData.ids =
                this.selectFileNameArray.length != 0 ? idArray.join(",") : id;
              this.copyStoreData.oldProjId = this.oldProjId;
              this.copyStoreData.newProjId = this.newProjId;
              this.copyStoreData.copyData = this.rightMenuItemData;
              this.copyStoreData.copyType = this.copyType;
              this.$store.commit("manuscriptCopyFn", this.copyStoreData);
              setTimeout(() => {
                this.$message({
                  message: "剪切成功",
                  type: "success"
                });
                this.rightMenuIsShow = false;
              }, 100);
            }
          }
        });
      } else {
        this.$message({
          message: "当前无权限",
          type: "warning"
        });
      }
    },
    rightMenuPaste() {
      //右键粘贴
      var copyData = this.$store.state.manuscriptCopy;
      var nodes = this.manuscriptTreeDemo.getSelectedNodes();
      var node = nodes[0];
      if (copyData.copyType == 1) {
        //复制过来的
        var data = {
          token: this.token,
          userId: this.userId,
          pageNo: 0,
          pageSize: 10,
          data: {
            ids: copyData.ids,
            projId:
              copyData.newProjId != ""
                ? copyData.newProjId
                : copyData.oldProjId,
            sourceProjId: copyData.oldProjId,
            parentId: node.id
          }
        };

        this.$post("/doc/paper/copyPaperDocs", data)
          .then(res => {
            if (this.requestCode.SUCCESS == res.code) {
              this.copyEchoingFn(node);
            } else {
              this.$message({
                message: res.msg,
                type: "error"
              });
            }
          })
          .catch(error => {
            console.log(error);
          });
      } else if (copyData.copyType == 2) {
        //剪切过来的
        var data = {
          token: this.token,
          userId: this.userId,
          pageNo: 0,
          pageSize: 10,
          data: {
            ids: copyData.ids,
            projId:
              copyData.newProjId != ""
                ? copyData.newProjId
                : copyData.oldProjId,
            sourceProjId: copyData.oldProjId,
            parentId: node.id
          }
        };
        this.$post("/doc/paper/cutPaperDocs", data)
          .then(res => {
            if (this.requestCode.SUCCESS == res.code) {
              this.copyEchoingFn(node);
            } else {
              this.$message({
                message: res.msg,
                type: "error"
              });
            }
            this.rightMenuIsShow = false;
          })
          .catch(error => {
            console.log(error);
          });
      }
    },
    rightMenuLock() {
      //右键锁定
      var proId = this.newProjId || this.pro_id;
      if (!rightSysPermissionFn(proId, "paper_file_file_lock")) {
        this.$message.warning("当前无权限");
        return;
      }
      var data = {
        token: this.$store.state.loginObject.userToken,
        userId: this.$store.state.loginObject.userId,
        sourceName: "底稿管理",
        projectName: this.projectName,
        paperFlag: true,
        data: {
          docId: this.rightMenuItemData.docId,
          projId: this.newProjId ? this.newProjId : this.pro_id,
          id: this.rightMenuItemData.id
        }
      };
      this.$post("/doc/paper/setDocLock", data)
        .then(res => {
          if (this.requestCode.SUCCESS == res.code) {
            this.rightMenuIsShow = false;
            this.DocLockEchoingFn(this.rightMenuItemData);
            this.$message.success("当前文件锁定成功");
            this.$select.updateStatus(2, this.pro_id, this.pro_id);
          } else if (this.requestCode.UPD_FAIL == res.code) {
            this.rightMenuIsShow = false;
            this.$message.error("当前文件未能锁定成功");
          }
        })
        .catch(error => {
          console.log(error);
        });
    },
    rightMenuUnLock() {
      //右键文件解锁
      if (!this.$utils.checkSystemPermission("paper_file_file_lock")) {
        this.$message.warning("您无对应的项目角色权限/后台权限");
        return;
      }
      if (this.rightMenuItemData.auditStatus == 8) {
        this.$message.warning("已归档的文件不可手动解锁！");
        return;
      }
      if (
        this.rightMenuItemData.auditStatus == 1 ||
        this.rightMenuItemData.auditStatus == 0 ||
        this.rightMenuItemData.auditStatus == 6
      ) {
        this.$message.warning("审批中/审批通过的文件不可手动解锁！");
        return;
      }
      this.$post("/doc/paper/setDocUnLock", {
        sourceName: "底稿管理",
        projectName: this.projectName,
        paperFlag: true,
        data: {
          docId: this.rightMenuItemData.docId,
          projId: this.newProjId ? this.newProjId : this.pro_id,
          id: this.rightMenuItemData.id
        }
      })
        .then(res => {
          if (this.requestCode.SUCCESS == res.code) {
            this.rightMenuIsShow = false;
            this.DocLockEchoingFn(this.rightMenuItemData);
            this.$message({
              message: "当前文件解锁成功",
              type: "success"
            });
            this.$select.updateStatus(2, this.pro_id, this.pro_id);
          } else if (this.requestCode.UPD_FAIL == res.code) {
            this.rightMenuIsShow = false;
            this.$message({
              message: "当前文件未能解锁成功",
              type: "error"
            });
          } else if (res.code === -2006) {
            this.$message({
              message: "您无对应的项目角色权限/后台权限",
              type: "warning"
            });
          } else {
            this.$message.error(res.msg);
          }
        })
        .catch(error => {
          console.log(error);
        });
    },
    rightMenuDocpro() {
      //右键文件属性
      this.propertyVisible = true;
      this.rightMenuIsShow = false;
      console.log(this.rightMenuItemData.length);
      var data = {
        token: this.token,
        userId: this.userId,
        sourceName: "底稿管理",
        projectName: this.projectName,
        paperFlag: true,
        data: {
          docId: this.rightMenuItemData.docId,
          id: this.rightMenuItemData.id
        }
      };
      this.$post("/doc/paper/getDocAttributeInfo", data)
        .then(res => {
          if (this.requestCode.SUCCESS == res.code) {
            this.propertyData = res.data;
          }
        })
        .catch(error => {
          console.log(error);
        });
    },
    below(url, data) {
      //下载模拟form表单
      var allUrl = this.reqApi + url;
      var form = $("<form></form>");
      form.attr("method", "post");
      form.attr("action", allUrl);
      form.attr("Content-Type", "application/json;charset=UTF-8");
      form.attr("dataType", "json");
      var input1 = $('<input name="random" style="opacity:0"/>');
      input1.val(data.random);
      var input2 = $('<input name="fileName" style="opacity:0"/>');
      input2.val(data.fileName);
      var input3 = $('<input name="files" style="opacity:0"/>');
      input3.val(data.files);
      form.append(input1);
      form.append(input2);
      form.append(input3);

      $("body").append(form);
      form.submit().remove();
    },
    DocLockEchoingFn(itemValue) {
      //封装锁定回显列表刷新
      var nodeParent = this.manuscriptTreeDemo.getNodeByParam(
        "id",
        itemValue.parentId,
        null
      );
      this.getTreeListFn(nodeParent, itemValue.id);
    },
    versionEchoingFn(itemValue, id) {
      //封装版本回显列表刷新
      var nodeParent = this.manuscriptTreeDemo.getNodeByParam(
        "id",
        itemValue,
        null
      );
      this.getTreeListFn(nodeParent, id);
    },
    delEchoingFn(itemValue, delType) {
      //封装删除回显示处理
      this.listPageNo = 0;
      //delType 删除类型 1.树的删除 2.导航标签 3.右键
      if (delType == 1) {
        var nodeParent = itemValue.getParentNode();
        if (nodeParent) {
          nodeParent.isParent = true;
          this.manuscriptTreeDemo.reAsyncChildNodes(nodeParent, "refresh");
          this.manuscriptTreeDemo.selectNode(nodeParent);
          this.workCatalogueParentId = nodeParent.parentId;
          this.getTreeListFn(nodeParent);
        } else {
          this.workCatalogueParentId = "";
          this.getTreeDataFn();
          this.flieNameData = [];
        }
      } else if (delType == 2 || delType == 3) {
        console.log("走这。‘——————");
        setTimeout(() => {
          this.getTreeDataFn();
        }, 2000);
        // $.fn.zTree.init($("#manuscriptTree"), this.setting, this.zNodes);
        // var ls = this.manuscriptTreeDemo.reAsyncChildNodesPromise(this.zNodes[0], "refresh"); //每次搜索都需要去异步刷新出
        // var nodeParent = this.manuscriptTreeDemo.getNodeByParam("id", itemValue.parentId, null);
        // var nodeParents = nodeParent.getParentNode()
        // this.manuscriptTreeDemo.reAsyncChildNodes(nodeParents, "refresh");
        // this.getTreeListFn(nodeParents)
        // if (itemValue.docType == 0) { //0.文件
        //     this.getTreeListFn(nodeParent)
        // } else if(itemValue.docType == 1) { //1.目录

        // }
      }
      this.navArray.map((item, idx) => {
        if (item.id == itemValue.id) {
          this.navArray.splice(idx, 1);
        } else {
          return;
        }
      });
      this.$message.success("删除成功(含有文件锁或特殊文件是不允许删除的)");
    },
    renameEchoingFn(itemValue, itemName, renameType) {
      // let originName = itemValue.highlightName
      //封装重命名回显示处理
      if (itemName.length > 250) {
        // this.$message.warning('最多可输入250个字');
        // let nodeParent = this.manuscriptTreeDemo.getNodeByParam('id', itemValue.parentId, null);
        // this.manuscriptTreeDemo.reAsyncChildNodes(nodeParent, 'refresh');
        return;
      }
      //itemValue 当前重命名的数据
      //itemName 当前输入的名字
      //renameType 编辑类型 1.树的重命名 2.右键
      let permission =
        itemValue.docType == 1 ? "paper_add_atalog" : "paper_file_file_rename";
      if (
        itemValue.quoteId === null &&
        !this.$utils.checkSystemPermission(permission)
      ) {
        this.$message.warning("您无对应的项目角色权限/后台权限");
        return false;
      }
      this.nameFilter(itemValue.docType == 1, itemName, this.isEditFlag)
        .then(res => {
          itemName = res;
          var data = {
            token: this.token,
            userId: this.userId,
            data: {
              docType: itemValue.docType,
              id: itemValue.id,
              docId: itemValue.docId,
              docSource: "1",
              projectId: this.newProjId ? this.newProjId : this.pro_id,
              parentId: itemValue.parentId,
              docName: itemName + this.renameSuffix
            }
          };
          this.$post("/doc/project/validate/docNameByDocSource", data)
            .then(res => {
              if (this.requestCode.SUCCESS == res.code) {
                if (itemName + this.renameSuffix == res.data) {
                  var data = {
                    token: this.token,
                    userId: this.userId,
                    sourceName: "底稿管理",
                    projectName: this.projectName,
                    paperFlag: true,
                    data: {
                      id: itemValue.id,
                      docName: res.data,
                      // originaName: this.renameData.docName,
                      originaName: itemValue.docName,
                      docSource: "1",
                      docType: itemValue.docType,
                      quoteId: itemValue.quoteId
                    }
                  };
                  this.$post("/doc/paper/reName", data)
                    .then(res => {
                      if (this.requestCode.SUCCESS == res.code) {
                        if (renameType == 2) {
                          this.renameFlag = true;
                          this.flieNameData.map((item, idx) => {
                            if (item.id == this.renameData.id) {
                              item.isEdit = false;
                              item.isAddDir = false;
                            }
                          });
                          var nodeParent = this.manuscriptTreeDemo.getNodeByParam(
                            "id",
                            itemValue.parentId,
                            null
                          );
                          this.manuscriptTreeDemo.reAsyncChildNodes(
                            nodeParent,
                            "refresh"
                          );
                          this.getTreeListFn(nodeParent);
                          this.cancelAdd();
                        } else if (renameType == 1) {
                          this.navArray.map((item, idx) => {
                            if (item.id == itemValue.id) {
                              item.docName = itemName;
                            }
                          });
                          let zNode = this.manuscriptTreeDemo.getNodeByParam(
                            "id",
                            itemValue.id,
                            null
                          );
                          zNode.highlightName = itemName;
                          this.manuscriptTreeDemo.updateNode(zNode);
                          this.manuscriptTreeDemo.selectNode(zNode);
                        }
                        this.$message.success("编辑成功");
                        this.$store.commit("updateDocName", {
                          type: 2,
                          id: this.pro_id,
                          docName: itemName + this.renameSuffix,
                          fileId: itemValue.id
                        });
                      } else if ([-5006, -2006, -2008].includes(res.code)) {
                        var nowNode = this.manuscriptTreeDemo.getNodesByParam(
                          "id",
                          itemValue.id,
                          null
                        );
                        var nodeParent = nowNode[0].getParentNode();
                        this.manuscriptTreeDemo.selectNode(nodeParent);
                        this.manuscriptTreeDemo.reAsyncChildNodes(
                          nodeParent,
                          "refresh"
                        );
                        this.getTreeListFn(nodeParent);
                        this.$message.warning(res.msg);
                      } else {
                        this.$message({
                          message: "编辑失败",
                          type: "error"
                        });
                      }
                    })
                    .catch(error => {
                      console.log(error);
                    });
                  return true;
                } else {
                  var newName = res.data;
                  this.$confirm(
                    `您确定要使用${res.data}来当作文件的名字`,
                    "提示",
                    {
                      confirmButtonText: "确定",
                      cancelButtonText: "取消",
                      type: "warning"
                    }
                  )
                    .then(() => {
                      var data = {
                        token: this.token,
                        userId: this.userId,
                        sourceName: "底稿管理",
                        projectName: this.$store.state.projectMsg.projectMsg
                          .name,
                        paperFlag: true,
                        data: {
                          id: itemValue.id,
                          docName: res.data,
                          // originaName: this.renameData.docName,
                          originaName: itemValue.docName,
                          docSource: "1",
                          docType: itemValue.docType,
                          quoteId: itemValue.quoteId
                        }
                      };
                      this.$post("/doc/paper/reName", data)
                        .then(res => {
                          if (this.requestCode.SUCCESS == res.code) {
                            if (renameType == 2) {
                              this.renameFlag = true;
                              this.flieNameData.map((item, idx) => {
                                if (item.id == this.renameData.id) {
                                  item.isEdit = false;
                                  item.docName = newName;
                                  this.flieNameData.splice(idx, idx + 1, item);
                                }
                              });
                              var nodeParent = this.manuscriptTreeDemo.getNodeByParam(
                                "id",
                                itemValue.parentId,
                                null
                              );
                              this.manuscriptTreeDemo.reAsyncChildNodes(
                                nodeParent,
                                "refresh"
                              );
                              this.getTreeListFn(nodeParent);
                            } else if (renameType == 1) {
                              var nodeParent = this.manuscriptTreeDemo.getNodeByParam(
                                "id",
                                itemValue.parentId,
                                null
                              );
                              this.manuscriptTreeDemo.reAsyncChildNodes(
                                nodeParent,
                                "refresh",
                                true,
                                () => {
                                  this.manuscriptTreeDemo.selectNode(
                                    this.manuscriptTreeDemo.getNodeByParam(
                                      "id",
                                      this.workCatalogueParentId
                                    )
                                  );
                                }
                              );
                              this.navArray.map((item, idx) => {
                                if (item.id == itemValue.id) {
                                  item.docName = newName;
                                }
                              });
                            }
                            console.log();
                            this.$message.success("编辑成功");
                          } else if ([-5006, -2006, -2008].includes(res.code)) {
                            var nowNode = this.manuscriptTreeDemo.getNodesByParam(
                              "id",
                              itemValue.id,
                              null
                            );
                            var nodeParent = nowNode[0].getParentNode();
                            this.manuscriptTreeDemo.selectNode(nodeParent);
                            this.manuscriptTreeDemo.reAsyncChildNodes(
                              nodeParent,
                              "refresh"
                            );
                            this.getTreeListFn(nodeParent);
                            this.$message.warning(res.msg);
                          } else {
                            this.$message({
                              message: "编辑失败",
                              type: "error"
                            });
                          }
                        })
                        .catch(error => {
                          console.log(error);
                        });
                      return true;
                    })
                    .catch(() => {
                      if (renameType == 1) {
                        var nodeParent = itemValue.getParentNode();
                        this.manuscriptTreeDemo.reAsyncChildNodes(
                          nodeParent,
                          "refresh",
                          true,
                          () => {
                            this.manuscriptTreeDemo.selectNode(
                              this.manuscriptTreeDemo.getNodeByParam(
                                "id",
                                this.workCatalogueParentId
                              )
                            );
                          }
                        );
                      }
                      return false;
                    });
                }
              }
            })
            .catch(error => {
              console.log(error);
            });
          // });
        })
        .catch(res => {
          if (renameType == 1) {
            let treeNode = this.manuscriptTreeDemo.getNodeByParam(
              "id",
              itemValue.id,
              null
            );
            console.log(treeNode);
            console.log(treeNode.tId);
            this.manuscriptTreeDemo.editName(treeNode);
            $(`#${treeNode.tId}_input`).val(res);
            return;
          }
          this.editName_input = res;
        });
    },
    async renamePowerTest(itemValue, itemName, renameType) {
      //验证有没有重命名权限
      let myIndex = 0;
      let docName = "";
      let docSuffix = "";
      if (itemValue.docType === 0) {
        //文件
        myIndex = itemName.lastIndexOf(".");
        docName = itemName.substr(0, myIndex); //文件名
        docSuffix = itemName.substr(myIndex); //文件扩展名
      } else {
        //文件夹
        docName = itemName;
        docSuffix = "";
      }
      //itemValue 当前重命名的数据
      //itemName 当前输入的名字
      //renameType 编辑类型 1.树的重命名 2.右键
      if (
        itemValue.quoteId === null &&
        !this.$utils.checkSystemPermission("paper_add_atalog")
      ) {
        this.$message.warning("您无对应的项目角色权限/后台权限");
        return false;
      }
      var data = {
        token: this.token,
        userId: this.userId,
        data: {
          docType: itemValue.docType,
          id: itemValue.id,
          docId: itemValue.docId,
          docSource: "1",
          projectId: this.newProjId ? this.newProjId : this.pro_id,
          parentId: itemValue.parentId,
          docName: docName + docSuffix
        }
      };
      var data = await this.$post(
        "/doc/project/validate/docNameByDocSource",
        data
      )
        .then(res => {
          if (this.requestCode.SUCCESS == res.code) {
            return true;
          } else if (res.code === -5006) {
            return false;
          }
        })
        .catch(error => {
          console.log(error);
        });
      return data;
    },
    copyEchoingFn(itemValue) {
      //封装粘贴处理回显列表刷新
      var nodeParent = this.manuscriptTreeDemo.getNodeByParam(
        "id",
        itemValue.id,
        null
      );
      this.manuscriptTreeDemo.reAsyncChildNodes(nodeParent, "refresh");
      this.getTreeListFn(nodeParent);
      this.$message.success("粘贴成功");
    },
    navFilterFn(node) {
      if (!node) {
        // return; 中断执行
        return;
      }
      this.navArray.unshift({
        id: node.id,
        docName: node.docName
      });
      var parentNode = node.getParentNode();
      if (parentNode) {
        this.navFilterFn(parentNode);
      }
      return this.navArray;
    },
    iconFilter(itemValue) {
      //过滤重命名的icon
      if (itemValue.docType == 1) {
        itemValue.fileIcon = require("../../common/fileIcon/FolderType1.png");
      } else {
        itemValue.fileIcon = this.$utils.iconFilter(itemValue.docName);
      }
    },
    //编辑索引
    editIndex(item) {
      this.editIndexCurPaper = item;
      if (item.indexPaper !== undefined) {
        this.indexList = item.indexPaper;
        for (let i = 0; i < this.indexList.length; i++) {
          this.$set(this.indexList, this.indexList[i].oldIndexPaper, true);
        }
      }
      this.relafagmanus = true;
    },
    //关闭从底稿选择
    draftClears(varyt) {
      this.relafagmanus = false;
    },
    //底稿返回值
    elationUpmanscFn(newAddIndexPaper, oldIndexPaper) {
      let arr = []; //新增id集合
      let delIds = []; //删除id集合
      let addIndexList = [];
      let delIndexList = [];
      newAddIndexPaper.forEach(function(c) {
        if (c.id) {
          let obj = {};
          obj.id = c.id;
          obj.docName = c.docName;
          obj.parentName = c.parentName;
          arr.push(c.id);
          addIndexList.push(obj);
        }
      });
      oldIndexPaper.forEach(function(c) {
        if (c.id) {
          let obj = {};
          obj.id = c.id;
          obj.docName = c.docName;
          obj.parentId = c.parentId;
          delIds.push(c.id);
          delIndexList.push(obj);
        }
      });
      if (oldIndexPaper.length === 0 && arr.length === 0) {
        this.relafagmanus = false;
        return;
      }
      var data = {
        token: this.token,
        userId: this.userId,
        sourceName: "底稿管理",
        projectName: this.projectName,
        paperFlag: true,
        data: {
          paperId: this.editIndexCurPaper.id,
          delIds: delIds,
          addIndexId: arr,
          docName: this.editIndexCurPaper.docName,
          parentName: this.editIndexCurPaper.parentName,
          delIndexList: delIndexList,
          addIndexList: addIndexList
        }
      };
      this.$post("/doc/paper/editPaperIndex", data)
        .then(res => {
          if (this.requestCode.SUCCESS != res.code) {
            this.$message.error(res.msg);
            return;
          }
          this.relafagmanus = false;
          this.$message.success(res.msg);
          this.labelList(this.editIndexCurPaper);
        })
        .catch(err => console.log(err));
    },
    //批量编辑索引
    editIndexList() {
      this.openBatchEditIndex = true;
      // this.$refs.docRelationObj.treeQueryDoc(0);
      this.$refs.docRelationObj.queryDraftDoc(0);
    },
    //提交批量索引
    submitBatchIndex(leftItemArr, leftIdsArr, rightItemArr, rightIdsArr) {
      let paperList = [];
      leftItemArr.forEach(function(c) {
        if (c.id) {
          let obj = {};
          obj.id = c.id;
          obj.docName = c.docName;
          obj.parentName = c.parentName;
          paperList.push(obj);
        }
      });
      var data = {
        token: this.token,
        userId: this.userId,
        sourceName: "底稿管理",
        projectName: this.projectName,
        paperFlag: true,
        data: {
          paperIds: leftIdsArr,
          paperIdIndex: rightIdsArr[0],
          paperList: paperList, //左侧选中数据列表
          docName: rightItemArr[0].docName, //右侧
          parentName: rightItemArr[0].parentName, //右侧
          paperIdIndex: rightItemArr[0].id //右侧
        }
      };
      this.$post("/doc/paper/editPaperIndexMax", data)
        .then(res => {
          if (this.requestCode.SUCCESS != res.code) {
            this.$message.error(res.msg);
            return;
          }
          this.openBatchEditIndex = false;
          this.labelList(leftItemArr);
          this.$message.success(res.msg);
        })
        .catch(error => {
          console.log(error);
        });
    },
    /**
     * 鼠标移入 获取底稿关联文件路径
     * @param {Object} item 当前底稿关联文件信息
     * @desc  此处优化： 1、如果当前底稿关联文件已经获取过title 则不重新调接口
     *                  2、去除两次遍历查找对应底稿关联文件操作
     */
    indexPaperHover(item) {
      if (
        Object.prototype.toString.call(item.title).toLowerCase() !==
        "[object undefined]"
      ) {
        return;
      }
      this.$post("/doc/paper/queryPaperParent", {
        data: {
          id: item.id
        }
      })
        .then(res => {
          if (this.requestCode.SUCCESS != res.code) {
            this.$message.warning(res.msg);
            return;
          }
          this.$set(item, "title", res.data.reverse().join(" / "));
        })
        .catch(err => console.log(err));
    },
    //预览被索引文件
    paperIndexView(row, itemValue) {
      if (
        !rightSysPermissionFn(
          this.newProjId || this.pro_id,
          "paper_file_file_preview"
        )
      ) {
        this.$message.warning("无对应文件预览权限，请在角色权限中进行配置");
        return;
      }
      if (row.isLinkDelete === 1 || itemValue.isLinkDelete === 1) {
        this.$message.warning("文件已删除，不能预览");
        return;
      }
      var previewData = {
        projectId: row.projectId,
        rfsId: itemValue.rfsId,
        docId: itemValue.docId,
        photoType: itemValue.type,
        sourceType: "manuscriptmanage",
        isPaperIndexDoc: true,
        paperIndexCatalog: itemValue.title, //被索引文件的上级，上上级，一直到顶级的目录列表
        docName: itemValue.docName,
        sourceName: "底稿管理"
      };
      this.$store.commit("previewAllFn", previewData);
    },
    // 报送
    handleSend(command) {
      if (command === 0) {
        this.checkProjectComplete();
      } else if (command === 1) {
        // 未选择文件
        this.$select.updateStatus(2, this.pro_id, this.pro_id);
        this.updateSelData();
        let delData = true
          ? [...this.selectManaullyFile, ...this.selectDir]
          : [this.rightMenuItemData];
        this.rightMenuIsShow = false;
        if (delData.length === 0) {
          this.$message.error("未选择文件，请先选择文件后进行报送！");
          return false;
        }
        // 非审批通过文件
        let selectManaullyFile = [...this.selectManaullyFile];
        console.log(selectManaullyFile);
        selectManaullyFile.map((item, index) => {
          if (item.auditStatus != 1 && item.auditStatus != 8) {
            this.$confirm("有非审批通过的文件，确定继续报送？", "提示", {
              confirmButtonText: "确定",
              cancelButtonText: "取消",
              type: "warning"
            })
              .then(() => {
                this.fileSend();
              })
              .catch(() => {});
            return false;
          } else if (index == selectManaullyFile.length - 1) {
            this.fileSend();
          }
        });
      }
    },
    // 校验项目组内人员信息是否填写完整
    checkProjectComplete() {
      let obj = {
        data: {
          projectId: this.$store.state.projectMsg.pro_id
        }
      };
      this.$post("/info/project/checkProjectComplete", obj)
        .then(res => {
          if (res.code === 0) {
            if (res.data.complete) {
              this.$router.push({ path: "/submitInformation" });
            }
            //  else {
            //   this.$message.error(
            //     "人员信息不全，请联系后台管理员完善项目组内人员信息！"
            //   );
            // }
          } else {
            this.$message.error(res.data);
          }
        })
        .catch(error => {});
    },
    // 点击抽查文件报送
    fileSend() {
      const loading = this.$loading({
        lock: true,
        text: "",
        spinner: "",
        background: "rgba(255, 255, 255, 0.9)"
      });
      // console.log(this.$store.state.projectMsg)
      // console.log([...this.selectManaullyFile] )
      // console.log([...this.selectDir] )
      let arr = [...this.selectManaullyFile].concat([...this.selectDir]);
      // console.log(arr)
      let obj = {
        data: {
          projectId: this.$store.state.projectMsg.pro_id,
          reportType: 1,
          docIds: arr,
          itemName: this.$store.state.projectMsg.projectMsg.name
          // itemStage: this.$store.state.projectMsg.projectMsg.currentStageId,
          // itemType: this.$store.state.projectMsg.projectMsg.financingId,
        }
      };
      this.$post("/doc/project/report", obj)
        .then(res => {
          if (res.code === 0) {
            this.$message.success("请求成功！");
          } else if (res.code === -5101) {
            this.$message.error("该项目非抽查文件，无法报送！");
          } else if (res.code === -5102) {
            this.$message.error("原报送信息不存在该文件，无法报送！");
          } else {
            this.$message.error(res.msg);
          }
          loading.close();
        })
        .catch(error => {
          loading.close();
        });
    }
  }
};
</script>
<style lang="scss" scoped>
// 全局样式
.manuscriptmanage_box {
  .table-header-row /deep/th {
    background: #14161a;
  }
  .rightMenu {
    position: fixed;
    z-index: 999;
  }

  .right_tree {
    width: 100%;
    height: 90%;
    overflow: auto;

    .examineZtree {
      width: 100%;
      height: 100%;
    }
  }
}

// 头部样式
.manuscriptmanage_header {
  width: 100%;
  height: 100px;
  background-color: #fff;
  text-align: left;
  margin-bottom: 10px;

  .header_break {
    height: 20px;
    font-size: 14px;
    padding: 13px 0 13px 20px;
  }

  .indexpage_header {
    display: flex;
    justify-content: space-between;
    align-items: center;

    .header_title {
      padding-left: 20px;
      display: flex;
      align-items: center;

      .title_portrait_icon {
        width: 40px;
        height: 40px;
        display: inline-block;
        background: url("../../../assets/manuscript_icon/title_portrait_icon.png")
          no-repeat;
        background-size: 40px 40px;
      }

      .title_name {
        padding-left: 7px;
      }

      .message_send {
        margin-bottom: 10px;
        width: auto;
      }
    }

    .header_operation {
      display: flex;
      padding-right: 2px;

      .header_operation_chunk {
        height: 45px;
        padding-right: 36px;
        text-align: center;
        cursor: pointer;
        position: relative;
        .send_note {
          position: absolute;
          top: 0;
          right: 20px;
          color: #c0c4cc;
        }
      }
    }

    .item {
      position: absolute;
      top: 0;
      right: 15px;
    }
  }
}

// 下部分
#manuscriptmanage {
  width: 100%;
  position: relative;
  display: flex;

  /deep/ .el-scrollbar__wrap {
    overflow-x: auto;
  }

  /*谷歌、safari、qq浏览器、360浏览器滚动条样式*/
  /*定义滚动条高宽及背景 高宽分别对应横竖滚动条的尺寸*/
  ::-webkit-scrollbar {
    width: 8px;
    height: 8px;
    background-color: #f5f5f5;
  }

  /*定义滚动条轨道 内阴影+圆角*/
  ::-webkit-scrollbar-track {
    -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);
    border-radius: 10px;
    background-color: #f5f5f5;
  }

  /*定义滑块 内阴影+圆角*/
  ::-webkit-scrollbar-thumb {
    border-radius: 10px;
    -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);
    background-color: #bdbdbd;
  }

  /*滑块效果*/
  ::-webkit-scrollbar-thumb:hover {
    border-radius: 5px;
    -webkit-box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.2);
    background: rgba(0, 0, 0, 0.4);
  }

  /*IE滚动条颜色*/
  html {
    scrollbar-face-color: #bfbfbf;
    /*滚动条颜色*/
    scrollbar-highlight-color: #000;
    scrollbar-3dlight-color: #000;
    scrollbar-darkshadow-color: #000;
    scrollbar-shadow-color: #adadad;
    /*滑块边色*/
    scrollbar-arrow-color: rgba(0, 0, 0, 0.4);
    /*箭头颜色*/
    scrollbar-track-color: #eeeeee;
    /*背景颜色*/
  }

  .bottom_catalogue {
    width: 100%;
    margin-right: 10px;
    background: #ffffff;
    display: flex;
    flex-direction: column;
    position: relative;

    .catalogue_search {
      width: 100%;
      display: flex;
      flex-direction: column;

      .catalogue_search_input {
        width: 95%;
        margin: 5px 2.5% 5px 2.5%;
      }

      .catalogue_search_showTitle {
        display: flex;
        justify-content: space-between;
        align-items: center;

        .catalogue_search_showTitle_left {
          margin-left: 2.5%;
          font-size: 12px;
          color: #ba954b;
        }

        .catalogue_search_showTitle_right {
          margin-right: 2.5%;
        }
      }

      .catalogue_search_showTitle_empty {
        display: flex;

        .catalogue_search_showTitle_empty_left {
          margin-left: 2.5%;
          font-size: 12px;
          color: #ba954b;
        }
      }
    }

    .search_tree {
      height: calc(100% - 80px - 26px - 25px) !important;
      height: -webkit-calc(100% - 26px- 25px) !important; //chrome
      height: -moz-calc(100% - 26px- 25px) !important; //firefox
    }

    .catalogue_tree {
      width: calc(100% - 10px);
      height: calc(100% - 80px - 26px);
      height: -webkit-calc(100% - 26px); //chrome
      height: -moz-calc(100% - 26px); //firefox
      margin: 5px 5px 0px 5px;
      overflow: auto;
      box-sizing: border-box;

      .ztree {
        width: 100%;
        // height: 100%;
        background: #fff;
        padding: 5px 0;
        box-sizing: border-box;
      }
    }

    .catalogue_operation {
      width: 100%;
      height: 50px;
      display: flex;
      align-items: center;
      position: absolute;
      bottom: 0;
      left: 0;
      border-top: 1px solid #dddddd;
      background: #fff;
      overflow: hidden;

      .operation_common:hover {
        cursor: pointer;
      }

      div {
        flex: 1;
        width: 14px;
        height: 14px;
        margin: 9px 15px 9px 15px;
      }
    }

    .shrink_bac_pull {
      width: 16px;
      height: 47px;
      display: inline-block;
      background: url("../../../assets/manuscript_icon/leftpull_icon.png")
        no-repeat;
      background-size: 100% 100%;
      position: absolute;
      right: 0;
      top: 0;
      bottom: 0;
      margin: auto;
      cursor: pointer;
      z-index: 500;
    }

    .shrink_bac_push {
      width: 16px;
      height: 47px;
      display: inline-block;
      background: url("../../../assets/manuscript_icon/rightpush_icon.png")
        no-repeat;
      background-size: 100% 100%;
      position: absolute;
      right: 0;
      top: 0;
      bottom: 0;
      margin: auto;
      cursor: pointer;
      z-index: 500;
    }
  }

  .bottom_indexpage {
    width: 100%;
    height: 100%;
    background: #ffffff;
    overflow: auto;
    box-sizing: border-box;

    .bottom_box_fied {
      height: 50px;
      width: 100%;

      .bottom_box {
        position: fixed;
        z-index: 888;
        bottom: 10px;
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        align-items: center;
        height: 50px;
        background: #fff;
        border-top: 1px solid #ddd;

        .sel_total {
          padding-left: 23px;
        }

        .bottom_pagination {
          padding-right: 24px;
          margin: 5px 0;
        }
      }
    }

    .indexpage_nav {
      width: 100%;
      display: flex;
      flex-direction: column;

      .nav_title {
        height: 30px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin: 10px 0 0 19px;

        .title_left {
          width: 95%;
          max-width: 95%;
          /*写给不支持calc()的浏览器*/
          //   max-width: -moz-calc(100% - 226px);
          //   max-width: -webkit-calc(100% - 226px);
          //   max-width: calc(100% - 226px);
          height: 100%;
          display: flex;
          align-items: center;

          .title_nav {
            width: 95%;
            max-width: 95%;
            height: 28px;
            border: 1px solid #d7d7d7;
            padding-left: 7px;
            background: #f7f8fa;
            border-radius: 1px;
            display: flex;
            align-items: center;
            font-size: 13px;
            overflow: hidden;
          }
        }
      }

      // 检索组
      .search_box {
        display: flex;
        justify-content: space-between;
        border-bottom: 1px solid #ddd;

        .search_btn {
          width: 216px;
          padding: 7px 0 7px 8px;

          /deep/ .el-button {
            width: 97px;
            height: 40px;
          }
        }

        .default_search_btn {
          margin-top: 8px;
        }

        .search_box_toggle {
          min-height: 65px !important;
          max-height: 500px !important;
          max-width: 100% !important;
        }

        .search_box_left {
          // display: flex;
          // flex-wrap: wrap;
          max-height: 52px;
          max-width: 50%;
          /*写给不支持calc()的浏览器*/
          max-width: -moz-calc(100% - 350px);
          max-width: -webkit-calc(100% - 350px);
          max-width: calc(100% - 350px);
          overflow: hidden;
          padding: 8px 0 8px 20px;

          .search_item {
            // display: flex;
            float: left;
            height: 40px;
            // justify-content: space-between;
            padding: 7px 22px 7px 0;

            .search_tit {
              float: left;
              width: 90px;
              line-height: 40px;
            }
            .el_wide {
              float: left;
            }
            /deep/ .el-input[class~="el_wide"],
            .el-select[class~="el_wide"] {
              width: 286px;
              height: 40px;
            }
          }
        }
      }

      // 按钮组
      .nav_operation {
        display: flex;
        justify-content: space-between;

        .btn_group_toggle {
          min-height: 60px !important;
          max-height: 300px !important;
        }

        .btn_box {
          max-height: 40px;
          margin: 5px 0 5px 19px;
          display: flex;
          flex-wrap: wrap;
          overflow: hidden;
        }
      }
    }

    .indexpage_list {
      width: 100%;
      //   height: 500px;
      .manu_table {
        /deep/ .el-table__row .cell .list_name_icon {
          margin-left: -7px;
        }
        padding-bottom: 5px;
      }
      .list_name {
        display: flex;

        .list_name_icon {
          width: 36px;
          height: 36px;
          display: flex;
          justify-content: center;
          align-items: center;

          .list_name_icon_img {
            width: 23px;
            height: 23px;
          }
        }

        .list_name_title3 .three-row-name {
          line-height: 30px;
          margin-top: 4px;
        }

        .list_name_title3 .list_name_title_icon {
          padding-bottom: 4px;
        }

        .list_name_title2 .three-row-name {
          line-height: 20px;
          margin-top: 10px;
          padding-bottom: 6px;
        }

        .list_name_title2.list_name_title3 .three-row-name {
          line-height: 20px;
          margin-top: 6px;
          padding-bottom: 6px;
        }

        .list_name_rename {
          display: flex;
          align-items: center;
          width: calc(100% - 25px);

          .editIcon,
          .addIcon {
            width: 15px;
            height: 15px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;

            margin-left: 8px;
            font-size: 20px;
            cursor: pointer;
          }

          .editIcon {
            color: #add7a0;
          }

          .addIcon {
            color: #efb87f;
          }
        }

        .list_name_title_die {
          text-decoration: line-through;
          color: #2a383f;
          font-size: 14px;
        }

        .list_name_title {
          display: flex;
          flex-direction: column;
          overflow: hidden;
          text-overflow: ellipsis;
          white-space: nowrap;
          width: 100%;

          div {
            width: 100%;
            color: #2a383f;
            font-size: 14px;
            display: flex;
            align-items: center;

            span {
              max-width: calc(100% - 25px);
              display: inline-block;
              color: #2a383f;
              font-size: 14px;
              overflow: hidden;
              text-overflow: ellipsis;
              white-space: nowrap;
            }

            i {
              /*margin-left: 100px;*/
              color: #ccc;
              /*display: none;*/
              cursor: pointer;
              margin-left: 10px;
            }
          }

          .list_name_title_icon {
            display: flex;
            align-items: center;
            line-height: 17px;

            .list_icon {
              display: inline-block;
              font-size: 14px;
              padding: 2px 3px 0px 3px;
            }

            .icon_lock {
              color: #c0c4cc;
            }

            .icon_remind {
              color: #f56c6c;
            }

            .icon_note {
              color: #299be4;
            }

            .icon_record {
              color: #f8b164;
            }

            .list_icon_img {
              display: inline-block;
              height: 17px;
            }

            $imgUrl: "../../../assets/project_doc/";

            // 表格内图片图标
            .auditStatus_z {
              background: url($imgUrl+"shenpizhong.png") no-repeat 0% 0%/40px
                17px;
              width: 40px;
            }

            .auditStatus_dsp {
              background: url($imgUrl+"daishenpi.png") no-repeat 0% 0%/40px 17px;
              width: 40px;
            }

            .auditStatus_xdz {
              background: url($imgUrl+"xiudingzhong.png") no-repeat 0% 0%/40px
                17px;
              width: 40px;
            }
            .auditStatus_passed {
              background: url($imgUrl+"passed.png") no-repeat 0% 0%/40px 17px;
              width: 40px;
            }
            .auditStatus_noPassed {
              background: url($imgUrl+"noPassed.png") no-repeat 0% 0%/40px 17px;
              width: 40px;
            }

            .auditStatus_ygd {
              background: url($imgUrl+"yiguidang.png") no-repeat 0% 0%/40px 17px;
              width: 40px;
            }

            .auditStatus_pass {
              background: url($imgUrl+"shenpitongguo.png") no-repeat 0% 0%/50px
                17px;
              width: 50px;
            }

            .auditStatus_jdsptg {
              background: url($imgUrl+"jiedianshenpitongguo.png") no-repeat 0%
                0%/60px 17px;
              width: 60px;
            }

            .auditStatus_xdspz {
              background: url($imgUrl+"xuidingshenpizhong.png") no-repeat 0% 0%/60px
                17px;
              width: 60px;
            }

            .auditStatus_bhwxg {
              background: url($imgUrl+"bohuiweixiugai.png") no-repeat 0% 0%/60px
                17px;
              width: 60px;
            }

            .auditStatus_bhyxg {
              background: url($imgUrl+"bohuiyixiugai.png") no-repeat 0% 0%/60px
                17px;
              width: 60px;
            }
          }
        }
      }

      .list_time {
        width: 100%;
        display: flex;
        flex-direction: column;
        justify-content: center;

        .list_time_updateTime {
          display: flex;
          justify-content: center;
          color: #999999;
          font-size: 12px;
        }

        div {
          display: flex;
          justify-content: center;
          color: #999999;

          .list_time_updateUserName {
            display: inline-block;
            width: 60px;
            color: #333333;
            font-size: 12px;
            margin-left: 5px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
          }

          .list_time_docVersionNumber {
            display: inline-block;
            font-size: 12px;
            font-weight: bold;
          }
        }
      }
    }
  }

  .manuscriptmanage_section {
    width: 100%;
    height: 100%;
    display: flex;
  }

  .paper_index_name {
    width: 100%;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  .list_index_box {
    //width: 100%;
    //height: 64px;
    //overflow:hidden;
    //text-overflow:ellipsis;
    //white-space:nowrap;
  }

  .tab_edit_btn:hover {
    text-decoration: underline;
  }

  .paper_index_name_die {
    text-decoration: line-through;
  }
}

// 展开收起样式
.btn_drop {
  width: 48px;
  height: 24px;
  font-size: 12px;
  border: 1px solid rgba(215, 218, 226, 1);
  border-radius: 4px;
  flex-shrink: 0;
  &:hover {
    cursor: pointer;
    color: #fff;
  }
  .drop_icon {
    font-size: 8px;
  }
  &_search {
    margin: 17px 20px 0 0;
  }
  &_group {
    margin: 14px 20px 0 0;
  }
}

.operation_chunk {
  height: 32px;
  background: #f2f3f5;
  margin: 5px 10px 5px 0;
  // display: flex;
  float: left;
  align-items: center;
  border-radius: 2px;
  font-size: 14px;

  &:hover {
    color: #fff;
    cursor: pointer;
  }

  .chunk_icon {
    display: inline-block;
    margin: 8px 7px 7px 12px;
  }

  .chunk_name {
    display: inline-block;
    padding-right: 12px;
  }
}
.operation_chunk2 {
  &:hover {
    color: #fff;
    cursor: pointer;
  }
}
</style>
<style lang="scss" scope>
.title_select_dropdown {
  width: 200px;
}

/* 全文检索input样式 */
.title_input .el-input__inner {
  width: 100%;
  height: 30px;
  line-height: 30px;
  border-radius: 15px;
}

.title_input .el-input__suffix-inner .el-icon-search {
  line-height: 30px;
}

.ztree li span.button.diy01_ico_open {
  line-height: 0;
  margin: 0;
  width: 18px;
  height: 18px;
  display: inline-block;
  vertical-align: middle;
  border: 0 none;
  cursor: pointer;
  outline: none;
  background-color: transparent;
  background-repeat: no-repeat;
  background-attachment: scroll;
  background: url("../../../assets/manuscript_icon/close_icon.png") no-repeat;
  background-size: 18px 14px;
}

.ztree li span.button.diy01_ico_close {
  line-height: 0;
  margin: 0;
  width: 18px;
  height: 18px;
  display: inline-block;
  vertical-align: middle;
  border: 0 none;
  cursor: pointer;
  outline: none;
  background-color: transparent;
  background-repeat: no-repeat;
  background-attachment: scroll;
  background: url("../../../assets/manuscript_icon/open_icon.png") no-repeat;
  background-size: 18px 14px;
}

.ztree li span.button.diy02_ico_open {
  line-height: 0;
  margin: 0;
  width: 18px;
  height: 18px;
  display: inline-block;
  vertical-align: middle;
  border: 0 none;
  cursor: pointer;
  outline: none;
  background-color: transparent;
  background-repeat: no-repeat;
  background-attachment: scroll;
  background: url("../../../assets/common_icon/empty_open_icon.png") no-repeat;
  background-size: 18px 14px;
}

.ztree li span.button.diy02_ico_close {
  line-height: 0;
  margin: 0;
  width: 18px;
  height: 18px;
  display: inline-block;
  vertical-align: middle;
  border: 0 none;
  cursor: pointer;
  outline: none;
  background-color: transparent;
  background-repeat: no-repeat;
  background-attachment: scroll;
  background: url("../../../assets/common_icon/empty_close_icon.png") no-repeat;
  background-size: 18px 14px;
}

.ztree li a .dirStatus {
  display: inline-block;
  width: 8px;
  height: 8px;
  border-radius: 50%;
}

.ztree li a .statusPending {
  display: inline-block;
  width: 8px;
  height: 8px;
  background: orange;
  border-radius: 50%;
}

.ztree li a .statusPass {
  display: inline-block;
  width: 8px;
  height: 8px;
  background: green;
  border-radius: 50%;
}

.ztree li a .statusNoPass {
  display: inline-block;
  width: 8px;
  height: 8px;
  background: red;
  border-radius: 50%;
}

.manuscriptZtree li a .node_name {
  font-size: 14px;
  font-family: MicrosoftYaHei;
  font-weight: 400;
  color: rgba(51, 51, 51, 1);
}

.manuscriptZtree li a.curSelectedNode {
  padding-top: 0px;
  background: #f0f0f0;
  color: black;
  height: 16px;
  border: 1px #f0f0f0 solid;
  opacity: 0.8;
}

.manuscriptZtree li span.switch {
  display: none;
}

.examineZtree li a .button {
  float: left;
}

.examineZtree li a .node_name {
  max-width: 250px;
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  font-size: 14px;
}

.examineZtree li .diyState {
  display: inline-block;
  height: 16px;
  margin-left: 5px;
  cursor: none;
}

.examineZtree li .diyState:link {
  text-decoration: none;
}

.examineZtree li span.button.examine_ico_open {
  line-height: 0;
  margin: 0;
  width: 18px;
  height: 18px;
  display: inline-block;
  vertical-align: middle;
  border: 0 none;
  cursor: pointer;
  outline: none;
  background-color: transparent;
  background-repeat: no-repeat;
  background-attachment: scroll;
  background: url("../../../assets/manuscript_icon/examopen_icon.png") no-repeat;
  background-size: 18px 14px;
}

.examineZtree li span.button.examine_ico_close {
  line-height: 0;
  margin: 0;
  width: 18px;
  height: 18px;
  display: inline-block;
  vertical-align: middle;
  border: 0 none;
  cursor: pointer;
  outline: none;
  background-color: transparent;
  background-repeat: no-repeat;
  background-attachment: scroll;
  background: url("../../../assets/manuscript_icon/examclose_icon.png")
    no-repeat;
  background-size: 18px 14px;
}

.examineZtree li span.button.diy03_ico_docu {
  line-height: 0;
  margin: 0;
  width: 18px;
  height: 14px;
  display: inline-block;
  vertical-align: middle;
  border: 0 none;
  cursor: pointer;
  outline: none;
  background-color: transparent;
  background-repeat: no-repeat;
  background-attachment: scroll;
  background: url("../../../assets/manuscript_icon/file_icon.png") no-repeat;
  background-size: 13px 14px;
}

.examineZtree li a.curSelectedNode {
  padding-top: 0px;
  background: #f0f0f0;
  color: black;
  height: 16px;
  border: 1px #f0f0f0 solid;
  opacity: 0.8;
}

.examineZtree li span.switch {
  display: none;
}

/* 全局查看弹框样式 */
.examine_dialog {
  .el-dialog__header {
    border-bottom: 1px solid #dddddd;
    text-align: center;
  }

  .examine_content {
    display: flex;
    width: 98%;
    margin: 0 1% 0 1%;
    height: 400px;
    border: 1px solid #dddddd;

    .content_left {
      width: 200px;
      height: 100%;
      border-right: 1px solid #dddddd;
      display: flex;
      flex-direction: column;

      .left_content {
        width: 100%;
        height: auto;
        flex: 1;

        .left_content_chunk {
          display: flex;
          flex-direction: column;
          text-align: left;
          margin: 12px 0 10px 15px;

          .content_chunk_name {
            display: inline-block;
          }

          .el-checkbox {
            margin-top: 7px;
          }
        }
      }

      .left_footer {
        width: 100%;
        height: 40px;
        display: flex;
        justify-content: center;
        align-items: center;
        border-top: 1px solid #dddddd;
        color: #999999;
        cursor: pointer;

        i {
          width: 14px;
          height: 14px;
          display: inline-block;
          background: url("../../../assets/manuscript_icon/clear_icon.png")
            no-repeat;
          background-size: 14px 14px;
          margin-right: 5px;
        }
      }
    }

    .content_right {
      width: calc(100% - 200px) !important;
      width: -webkit-calc(100% - 200px); //chrome
      width: -moz-calc(100% - 200px); //firefox
      height: 100%;
      display: flex;
      flex-direction: column;

      .right_title {
        width: 100%;
        height: 50px;
        background: #f0f0f0;
        display: flex;
        align-items: center;
        justify-content: space-between;

        .right_title_name {
          width: 8%;
          display: inline-block;
          margin-left: 4%;
        }

        .right_title_state {
          width: 8%;
          margin-left: 35%;
        }

        .right_title_download {
          margin-left: 15%;
        }

        .right_title_export {
          margin-left: 10px;
        }
      }
    }
  }
}

/* 文件属性 */
.fileAttribute_dialog {
  .el-dialog__header {
    border-bottom: 1px solid #dddddd;
    text-align: center;
  }

  .fileAttribute_content {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;

    .fileAttribute_content_item {
      width: 60%;
      display: flex;

      .fileAttribute_content_item_title {
        width: 60px;
        margin-left: 20px;
      }

      .fileAttribute_content_item_data {
        width: 260px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        text-align: left;
      }
    }
  }
}

/* 文件批注弹框样式 */
.postil_dialog .el-dialog__header {
  border-bottom: 1px solid #dddddd;
  text-align: center;
}

.postil_dialog .el-dialog__body {
  padding: 0 0;
}

.postil_dialog .postil_dialog_content {
  width: 95%;
  /*margin: 0 2.5% 0 2.5%;*/
  color: #2a383f;
  margin: 0 auto;
}

.postil_dialog_content .postil_dialog_content_fileName {
  text-align: left;
  width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  padding: 26px 0 0 0;
}

.postil_dialog_content .postil_dialog_content_title {
  text-align: left;
  padding: 13px 0 0 0;
}

.postil_dialog_content .postil_dialog_content_tabel {
  width: 100%;
  display: flex;
  flex-direction: column;
  border: 1px solid #dddddd;
  margin-top: 12px;
  margin-bottom: 20px;
}

.postil_dialog_content_tabel .postil_dialog_content_tabel_title {
  width: 100%;
  background: #f0f0f0;
  display: flex;
  align-items: center;
}

.postil_dialog_content_tabel_title span:nth-child(1) {
  width: 12%;
  display: inline-block;
  padding: 11px 0 10px 0;
  margin-left: 2%;
  text-align: left;
}

.postil_dialog_content_tabel_title span:nth-child(2) {
  width: 60%;
  display: inline-block;
  padding: 11px 0 10px 0;
  margin-left: 2%;
  text-align: left;
}

.postil_dialog_content_tabel_title span:nth-child(3) {
  width: 22%;
  display: inline-block;
  padding: 11px 0 10px 0;
  margin-left: 2%;
  text-align: left;
}

.postil_dialog_content_tabel .postil_dialog_content_tabel_coutent {
  width: 100%;
  height: 175px;
}

.postil_dialog_content_tabel_coutent .postil_dialog_content_tabel_coutent_item {
  width: 100%;
  display: flex;
  align-items: center;
}

.postil_dialog_content_tabel_coutent_item span {
  display: inline-block;
  font-size: 12px;
  margin-top: 14px;
}

.postil_dialog_content_tabel_coutent_item span:nth-child(1) {
  width: 12%;
  height: 20px;
  margin-left: 2%;
  text-align: left;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.postil_dialog_content_tabel_coutent_item span:nth-child(2) {
  width: 55%;
  margin-left: 2%;
  text-align: left;
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  /*! autoprefixer: off */

  -webkit-box-orient: vertical;

  /*! autoprefixer: on */

  -webkit-line-clamp: 3;
}

.postil_dialog_content_tabel_coutent_item span:nth-child(3) {
  width: 20%;
  height: 20px;
  margin-left: 7%;
  text-align: left;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/* .postil_dialog .postil_dialog_content_input{
        height: 10px;
    } */
.postil_dialog .el-input__inner {
  width: 570px;
  height: 65px;
  margin-top: 21px;
}

/* 版本弹框样式 */
.versions_dialog .el-dialog__header {
  border-bottom: 1px solid #dddddd;
  text-align: center;
}

.versions_dialog .el-dialog__body {
  padding: 20px 0;
}

.versions_dialog li {
  width: 100%;
  line-height: 40px;
  border-bottom: 1px solid #e7e7e7;
}

.versions_dialog .span_two {
  float: left;
  width: 17%;
}

.versions_dialog .span_first {
  float: left;
  width: 40%;
  text-align: left;
  margin-left: 5%;
}

.versions_dialog ul li div {
  height: 350px;
}

.version_content_item {
  width: 100%;
}

.version_content_item:hover {
  background: #fafafa;
}

.versions_dialog .span_btn {
  float: left;
  width: 40%;
  text-align: left;
  margin-left: 5%;
}

.versions_dialog .span_sec {
  float: left;
  width: 17%;
}

.span_sec .span_sec_return {
  color: #1a5fa4;
}

.span_sec .span_sec_down {
  color: #1a5fa4;
}

/deep/ #manuscriptmanage .versions_dialog .el-scrollbar .el-scrollbar__wrap {
  overflow-x: hidden;
}

.span_sec_return:hover {
  text-decoration: underline;
  cursor: pointer;
}

.span_sec_down:hover {
  text-decoration: underline;
  cursor: pointer;
}

.manu_table .el-table__header-wrapper .cell {
  font-size: 13px;
  color: rgba(51, 51, 51, 1);
}

.manu_table .el-table__body-wrapper .el-table__row td {
  border: none;
  //height: 64px;
  padding: 0;
}

.manu_table .el-table__body-wrapper .el-table__row td:nth-child(2) {
  border: none;
  height: 64px;
  padding: 0;
}

.manu_table .el-table td {
  border: none;

  // height: 50px;
}

#list_name_title_auditStatusdiv {
  display: inline-block;
  /*height: 47px;*/
  width: 591px;
  white-space: initial;
  .tag-label {
    display: inline-block;
    margin-right: 5px;
    padding: 1px 2px;
    width: 48px !important;
    height: 17px;
    line-height: 17px;
    font-size: 12px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    text-align: center;
    margin-top: 5px;
    border: 1px solid #ccdfee;
    border-radius: 4px;
    color: #2a383f;
    background-color: #e6eff6;
  }
  .isNotFit-label {
    color: #f56c6c !important;
    border-color: #f56c6c;
    background: #fef0f0;
  }
}

.edit-tag {
  visibility: hidden;
}

.list_name_title:hover .edit-tag {
  visibility: visible;
}

#heaer_img {
  display: inline-block;
  width: 26px;
  height: 24px;
  margin-top: 6px;
  background-size: 100%;
  background-image: url("../../../assets/image/bj.png");
}

#heaer_img:hover {
  display: inline-block;
  width: 26px;
  height: 24px;
  margin-top: 6px;
  background-size: 100%;
  background-image: url("../../../assets/image/ls.png");
}

.operate-btn-header {
  font-size: 22px;
}
</style>
<style>
.manu_table .el-table--small td {
  padding: 0;
}
</style>
